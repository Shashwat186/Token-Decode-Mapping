{
    "transfer_functions": {
      "approve": {
        "description": "Allows a spender to withdraw from the caller’s account up to the amount specified.",
        "fields": {
          "spender": "_spender",
          "amount": "_value"
        }
      },
      "transfer": {
        "description": "Transfers tokens directly from the caller’s address to another address.",
        "fields": {
          "transfer_to": "_to",
          "amount": "_value"
        }
      },
      "transferFrom": {
        "description": "Transfers tokens from one address to another on behalf of the sender.",
        "fields": {
          "transfer_from": "_from",
          "transfer_to": "_to",
          "amount": "_value"
        }
      }
    },
    "other_functions": {
      "claimTokens": {
        "description": "Claims tokens based on the amount and Merkle proof provided.",
        "fields": {
          "amount": "_amount",
          "delegate": "_delegate",
          "merkleProof": "_merkleProof"
        }
      },
      "delegate": {
        "description": "Delegates voting power to another address.",
        "fields": {
          "delegatee": "_delegatee"
        }
      },
      "delegateBySig": {
        "description": "Delegates voting power to another address using a signature.",
        "fields": {
          "delegatee": "_delegatee",
          "nonce": "_nonce",
          "expiry": "_expiry",
          "v": "_v",
          "r": "_r",
          "s": "_s"
        }
      },
      "setMerkleRoot": {
        "description": "Sets the Merkle root for claims.",
        "fields": {
          "merkleRoot": "_merkleRoot"
        }
      },
      "mint": {
        "description": "Mints new tokens and transfers them to a specified address.",
        "fields": {
          "dest": "_dest",
          "amount": "_amount"
        }
      },
      "sweep": {
        "description": "Sends all contract balance to a specified address.",
        "fields": {
          "dest": "_dest"
        }
      },
      "transferOwnership": {
        "description": "Transfers ownership of the contract to a new address.",
        "fields": {
          "newOwner": "_newOwner"
        }
      },
      "renounceOwnership": {
        "description": "Renounces ownership of the contract.",
        "fields": {}
      },
      "claimPeriodEnds": {
        "description": "Returns the end time of the claim period.",
        "fields": {}
      },
      "decimals": {
        "description": "Returns the number of decimals the token uses.",
        "fields": {}
      },
      "name": {
        "description": "Returns the name of the token.",
        "fields": {}
      },
      "symbol": {
        "description": "Returns the symbol of the token.",
        "fields": {}
      },
      "totalSupply": {
        "description": "Returns the total supply of the token.",
        "fields": {}
      },
      "balanceOf": {
        "description": "Returns the balance of a specified address.",
        "fields": {
          "account": "_account"
        }
      },
      "getVotes": {
        "description": "Returns the current voting power of an address.",
        "fields": {
          "account": "_account"
        }
      },
      "getPastVotes": {
        "description": "Returns the past voting power of an address at a specific block number.",
        "fields": {
          "account": "_account",
          "blockNumber": "_blockNumber"
        }
      },
      "getPastTotalSupply": {
        "description": "Returns the total supply of the token at a specific block number.",
        "fields": {
          "blockNumber": "_blockNumber"
        }
      },
      "checkpoints": {
        "description": "Returns the checkpoint details for a specified address and position.",
        "fields": {
          "account": "_account",
          "pos": "_pos"
        }
      },
      "numCheckpoints": {
        "description": "Returns the number of checkpoints for a specified address.",
        "fields": {
          "account": "_account"
        }
      },
      "nonces": {
        "description": "Returns the nonce for a specified address, used for permit.",
        "fields": {
          "owner": "_owner"
        }
      },
      "merkleRoot": {
        "description": "Returns the current Merkle root.",
        "fields": {}
      },
      "minimumMintInterval": {
        "description": "Returns the minimum interval required between mints.",
        "fields": {}
      },
      "mintCap": {
        "description": "Returns the maximum amount of tokens that can be minted.",
        "fields": {}
      },
      "nextMint": {
        "description": "Returns the timestamp of the next allowed mint.",
        "fields": {}
      },
      "isClaimed": {
        "description": "Checks if a specific claim has been made.",
        "fields": {
          "index": "_index"
        }
      },
      "DOMAIN_SEPARATOR": {
        "description": "Returns the domain separator used in EIP712 signatures.",
        "fields": {}
      },
      "allowance": {
        "description": "Returns the remaining number of tokens that a spender is allowed to spend from an owner's account.",
        "fields": {
          "owner": "_owner",
          "spender": "_spender"
        }
      },
      "permit": {
        "description": "Sets an approval with a permit, allowing spending from an owner's account.",
        "fields": {
          "owner": "_owner",
          "spender": "_spender",
          "value": "_value",
          "deadline": "_deadline",
          "v": "_v",
          "r": "_r",
          "s": "_s"
        }
      },
      "delegateChanged": {
        "description": "Emitted when a delegate is changed for an address.",
        "fields": {
          "delegator": "_delegator",
          "fromDelegate": "_fromDelegate",
          "toDelegate": "_toDelegate"
        }
      },
      "delegateVotesChanged": {
        "description": "Emitted when delegate votes are changed.",
        "fields": {
          "delegate": "_delegate",
          "previousBalance": "_previousBalance",
          "newBalance": "_newBalance"
        }
      },
      "MerkleRootChanged": {
        "description": "Emitted when the Merkle root is changed.",
        "fields": {
          "merkleRoot": "_merkleRoot"
        }
      },
      "Approval": {
        "description": "Emitted when an approval is made for a spender to withdraw tokens.",
        "fields": {
          "owner": "_owner",
          "spender": "_spender",
          "value": "_value"
        }
      },
      "Transfer": {
        "description": "Emitted when tokens are transferred from one address to another.",
        "fields": {
          "from": "_from",
          "to": "_to",
          "value": "_value"
        }
      },
      "OwnershipTransferred": {
        "description": "Emitted when ownership of the contract is transferred.",
        "fields": {
          "previousOwner": "_previousOwner",
          "newOwner": "_newOwner"
        }
      },
      "Claim": {
        "description": "Emitted when tokens are claimed.",
        "fields": {
          "claimant": "_claimant",
          "amount": "_amount"
        }
      }
    }
  }
  