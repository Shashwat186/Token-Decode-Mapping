{
    "transfer_functions": {
      "transfer": {
        "description": "Transfers a specified amount of tokens from the caller to a recipient.",
        "fields": {
          "recipient": "_recipient",
          "amount": "_amount"
        }
      },
      "transferFrom": {
        "description": "Transfers a specified amount of tokens from one address to another, on behalf of the owner.",
        "fields": {
          "sender": "_sender",
          "recipient": "_recipient",
          "amount": "_amount"
        }
      },
      "approve": {
        "description": "Sets the amount of tokens that a spender is allowed to spend on behalf of the caller.",
        "fields": {
          "spender": "_spender",
          "amount": "_amount"
        }
      },
      "increaseAllowance": {
        "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
        "fields": {
          "spender": "_spender",
          "addedValue": "_addedValue"
        }
      },
      "decreaseAllowance": {
        "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
        "fields": {
          "spender": "_spender",
          "subtractedValue": "_subtractedValue"
        }
      }
    },
    "other_functions": {
      "constructor": {
        "description": "Initializes the contract with specified parameters.",
        "fields": {
          "freeSupply": "_freeSupply",
          "airdropSupply": "_airdropSupply",
          "_claimPeriodEnds": "_claimPeriodEnds"
        }
      },
      "DOMAIN_SEPARATOR": {
        "description": "Returns the domain separator used in the EIP712 signature scheme.",
        "fields": {}
      },
      "name": {
        "description": "Returns the name of the token.",
        "fields": {}
      },
      "symbol": {
        "description": "Returns the symbol of the token.",
        "fields": {}
      },
      "decimals": {
        "description": "Returns the number of decimal places used by the token.",
        "fields": {}
      },
      "totalSupply": {
        "description": "Returns the total supply of the token.",
        "fields": {}
      },
      "balanceOf": {
        "description": "Returns the balance of a specific address.",
        "fields": {
          "account": "_account"
        }
      },
      "getVotes": {
        "description": "Returns the number of votes of a specific address.",
        "fields": {
          "account": "_account"
        }
      },
      "getPastVotes": {
        "description": "Returns the number of votes of a specific address at a past block number.",
        "fields": {
          "account": "_account",
          "blockNumber": "_blockNumber"
        }
      },
      "getPastTotalSupply": {
        "description": "Returns the total supply at a past block number.",
        "fields": {
          "blockNumber": "_blockNumber"
        }
      },
      "checkpoints": {
        "description": "Returns the checkpoints of a specific address.",
        "fields": {
          "account": "_account",
          "pos": "_pos"
        }
      },
      "numCheckpoints": {
        "description": "Returns the number of checkpoints of a specific address.",
        "fields": {
          "account": "_account"
        }
      },
      "delegates": {
        "description": "Returns the current delegate of a specific address.",
        "fields": {
          "account": "_account"
        }
      },
      "delegate": {
        "description": "Delegates voting power to another address.",
        "fields": {
          "delegatee": "_delegatee"
        }
      },
      "delegateBySig": {
        "description": "Delegates voting power by signature.",
        "fields": {
          "delegatee": "_delegatee",
          "nonce": "_nonce",
          "expiry": "_expiry",
          "v": "_v",
          "r": "_r",
          "s": "_s"
        }
      },
      "permit": {
        "description": "Sets allowances using the EIP2612 permit mechanism.",
        "fields": {
          "owner": "_owner",
          "spender": "_spender",
          "value": "_value",
          "deadline": "_deadline",
          "v": "_v",
          "r": "_r",
          "s": "_s"
        }
      },
      "claimPeriodEnds": {
        "description": "Returns the end of the claim period.",
        "fields": {}
      },
      "merkleRoot": {
        "description": "Returns the current Merkle root.",
        "fields": {}
      },
      "setMerkleRoot": {
        "description": "Sets a new Merkle root.",
        "fields": {
          "_merkleRoot": "_merkleRoot"
        }
      },
      "isClaimed": {
        "description": "Checks if a specific claim has been made.",
        "fields": {
          "index": "_index"
        }
      },
      "claimTokens": {
        "description": "Claims tokens using a Merkle proof.",
        "fields": {
          "amount": "_amount",
          "delegate": "_delegate",
          "merkleProof": "_merkleProof"
        }
      },
      "mint": {
        "description": "Mints new tokens to a specified address.",
        "fields": {
          "dest": "_dest",
          "amount": "_amount"
        }
      },
      "mintCap": {
        "description": "Returns the minting cap.",
        "fields": {}
      },
      "nextMint": {
        "description": "Returns the next mint amount.",
        "fields": {}
      },
      "sweep": {
        "description": "Sweeps funds from the contract to a specified address.",
        "fields": {
          "dest": "_dest"
        }
      },
      "renounceOwnership": {
        "description": "Renounces ownership of the contract.",
        "fields": {}
      },
      "transferOwnership": {
        "description": "Transfers ownership to a new address.",
        "fields": {
          "newOwner": "_newOwner"
        }
      },
      "owner": {
        "description": "Returns the current owner of the contract.",
        "fields": {}
      },
      "nonces": {
        "description": "Returns the nonce for a specific address.",
        "fields": {
          "owner": "_owner"
        }
      },
      "minimumMintInterval": {
        "description": "Returns the minimum interval between mints.",
        "fields": {}
      }
    }
  }
  