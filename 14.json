{
  "transfer_functions": {
    "approve": {
      "description": "Allows a spender to withdraw from the caller’s account up to the amount specified.",
      "fields": {
        "spender": "_spender",
        "rawAmount": "_amount"
      }
    },
    "transferFrom": {
      "description": "Transfers tokens from one address to another on behalf of the sender.",
      "fields": {
        "src": "_from",
        "dst": "_to",
        "rawAmount": "_amount"
      }
    },
    "mint": {
      "description": "Generates new tokens and assigns them to the specified address.",
      "fields": {
        "dst": "_owner",
        "rawAmount": "_amount"
      }
    },
    "destroyTokens": {
      "description": "Destroys a specified amount of tokens from the caller’s account.",
      "fields": {
        "owner": "_owner",
        "rawAmount": "_amount"
      }
    },
    "approveAndCall": {
      "description": "Approves a spender and calls a contract with the additional data.",
      "fields": {
        "spender": "_spender",
        "rawAmount": "_amount",
        "extraData": "_extraData"
      }
    },
    "setMinter": {
      "description": "Sets a new minter address.",
      "fields": {
        "minter_": "_minter"
      }
    }
  },
  "other_functions": {
    "name": {
      "description": "Returns the name of the token.",
      "fields": {}
    },
    "symbol": {
      "description": "Returns the symbol of the token.",
      "fields": {}
    },
    "decimals": {
      "description": "Returns the number of decimals used to get its user representation.",
      "fields": {}
    },
    "totalSupply": {
      "description": "Returns the total supply of tokens.",
      "fields": {}
    },
    "balanceOf": {
      "description": "Returns the balance of an account.",
      "fields": {
        "account": "_owner"
      }
    },
    "allowance": {
      "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
      "fields": {
        "owner": "_owner",
        "spender": "_spender"
      }
    },
    "minter": {
      "description": "Returns the address of the minter.",
      "fields": {}
    },
    "mintCap": {
      "description": "Returns the mint cap.",
      "fields": {}
    },
    "mintingAllowedAfter": {
      "description": "Returns the timestamp after which minting is allowed.",
      "fields": {}
    },
    "getCurrentVotes": {
      "description": "Returns the current votes of an account.",
      "fields": {
        "account": "_account"
      }
    },
    "getPriorVotes": {
      "description": "Returns the prior votes of an account at a specific block number.",
      "fields": {
        "account": "_account",
        "blockNumber": "_blockNumber"
      }
    },
    "Approval": {
      "description": "Triggered when approval is granted to a spender.",
      "fields": {
        "owner": "_owner",
        "spender": "_spender",
        "amount": "_amount"
      }
    },
    "Transfer": {
      "description": "Triggered when tokens are transferred.",
      "fields": {
        "from": "_from",
        "to": "_to",
        "amount": "_amount"
      }
    },
    "MinterChanged": {
      "description": "Triggered when the minter address is changed.",
      "fields": {
        "minter": "_minter",
        "newMinter": "_newMinter"
      }
    },
    "DelegateChanged": {
      "description": "Triggered when a delegate is changed.",
      "fields": {
        "delegator": "_delegator",
        "fromDelegate": "_fromDelegate",
        "toDelegate": "_toDelegate"
      }
    },
    "DelegateVotesChanged": {
      "description": "Triggered when the votes of a delegate change.",
      "fields": {
        "delegate": "_delegate",
        "previousBalance": "_previousBalance",
        "newBalance": "_newBalance"
      }
    }
  },
  "constructor": {
    "description": "Constructor for initializing the contract with the token factory and initial owner.",
    "fields": {
      "tokenFactory": "_tokenFactory",
      "initialOwner": "_initialOwner"
    }
  },
  "fallback": {
    "description": "Fallback function to accept ETH.",
    "fields": {}
  }
}
