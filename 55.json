{
    "transfer_functions": {
      "approve": {
        "description": "Allows a spender to withdraw from the caller’s account up to the amount specified.",
        "fields": {
          "spender": "The address to be allowed to spend the caller's tokens.",
          "amount": "The number of tokens that are approved."
        }
      },
      "transfer": {
        "description": "Transfers tokens directly from the caller’s address to another address.",
        "fields": {
          "transfer_to": "The address to which tokens are transferred.",
          "amount": "The amount of tokens to be transferred."
        }
      },
      "transferFrom": {
        "description": "Transfers tokens from one address to another on behalf of the sender.",
        "fields": {
          "transfer_from": "The address from which the tokens are being transferred.",
          "transfer_to": "The address to which tokens are being sent.",
          "amount": "The number of tokens to be transferred."
        }
      },
      "increaseAllowance": {
        "description": "Increases the amount of tokens that a spender is allowed to withdraw from the caller’s account.",
        "fields": {
          "spender": "The address of the spender whose allowance is increased.",
          "addedValue": "The additional amount of tokens to add to the spender's allowance."
        }
      },
      "decreaseAllowance": {
        "description": "Decreases the amount of tokens that a spender is allowed to withdraw from the caller’s account.",
        "fields": {
          "spender": "The address of the spender whose allowance is decreased.",
          "subtractedValue": "The amount of tokens to subtract from the spender's allowance."
        }
      }
    },
    "other_functions": {
      "mint": {
        "description": "Mints new tokens to a user's account.",
        "fields": {
          "user": "The address of the user receiving the newly minted tokens.",
          "amount": "The amount of tokens to mint."
        }
      },
      "executeMetaTransaction": {
        "description": "Executes a meta transaction on behalf of the user.",
        "fields": {
          "userAddress": "The address of the user on whose behalf the transaction is executed.",
          "functionSignature": "The function signature to execute.",
          "sigR": "Part of the signature.",
          "sigS": "Part of the signature.",
          "sigV": "Part of the signature."
        }
      },
      "grantRole": {
        "description": "Grants a role to a specific account.",
        "fields": {
          "role": "The role to be granted.",
          "account": "The address of the account receiving the role."
        }
      },
      "revokeRole": {
        "description": "Revokes a role from a specific account.",
        "fields": {
          "role": "The role to be revoked.",
          "account": "The address of the account from which the role is revoked."
        }
      },
      "renounceRole": {
        "description": "Allows the caller to renounce a role they hold.",
        "fields": {
          "role": "The role to be renounced.",
          "account": "The address of the account renouncing the role."
        }
      },
      "balanceOf": {
        "description": "Returns the balance of tokens for a specific account.",
        "fields": {
          "account": "The address of the account whose balance is being queried."
        }
      },
      "totalSupply": {
        "description": "Returns the total supply of tokens.",
        "fields": {}
      },
      "name": {
        "description": "Returns the name of the token.",
        "fields": {}
      },
      "symbol": {
        "description": "Returns the symbol of the token.",
        "fields": {}
      },
      "decimals": {
        "description": "Returns the number of decimals used by the token.",
        "fields": {}
      },
      "getChainId": {
        "description": "Returns the chain ID where the contract is deployed.",
        "fields": {}
      },
      "getDomainSeperator": {
        "description": "Returns the domain separator for EIP-712.",
        "fields": {}
      },
      "getNonce": {
        "description": "Returns the current nonce of the user for meta transactions.",
        "fields": {
          "user": "The address of the user whose nonce is queried."
        }
      }
    },
    "events": {
      "Approval": {
        "description": "Emitted when an approval is made for a spender to withdraw tokens.",
        "fields": {
          "owner": "The address of the token owner.",
          "spender": "The address of the spender approved to withdraw tokens.",
          "value": "The amount of tokens approved."
        }
      },
      "Transfer": {
        "description": "Emitted when tokens are transferred from one address to another.",
        "fields": {
          "from": "The address from which tokens are sent.",
          "to": "The address to which tokens are sent.",
          "value": "The number of tokens transferred."
        }
      },
      "RoleGranted": {
        "description": "Emitted when a role is granted to an account.",
        "fields": {
          "role": "The role granted.",
          "account": "The account receiving the role.",
          "sender": "The address that granted the role."
        }
      },
      "RoleRevoked": {
        "description": "Emitted when a role is revoked from an account.",
        "fields": {
          "role": "The role revoked.",
          "account": "The account losing the role.",
          "sender": "The address that revoked the role."
        }
      },
      "MetaTransactionExecuted": {
        "description": "Emitted when a meta transaction is executed.",
        "fields": {
          "userAddress": "The address of the user on whose behalf the transaction was executed.",
          "relayerAddress": "The address of the relayer executing the transaction.",
          "functionSignature": "The function that was executed."
        }
      }
    }
  }
  