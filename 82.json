{
  "transfer_functions": {
    "transfer": {
      "description": "Transfers `amount` tokens from the caller's account to `recipient`.",
      "fields": {
        "recipient": "_recipient",
        "amount": "_amount"
      }
    },
    "transferFrom": {
      "description": "Transfers `amount` tokens from `sender` to `recipient` using the caller's allowance.",
      "fields": {
        "sender": "_sender",
        "recipient": "_recipient",
        "amount": "_amount"
      }
    },
    "approve": {
      "description": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
      "fields": {
        "spender": "_spender",
        "amount": "_amount"
      }
    },
    "increaseAllowance": {
      "description": "Increases the allowance of `spender` by `addedValue`.",
      "fields": {
        "spender": "_spender",
        "addedValue": "_addedValue"
      }
    },
    "decreaseAllowance": {
      "description": "Decreases the allowance of `spender` by `subtractedValue`.",
      "fields": {
        "spender": "_spender",
        "subtractedValue": "_subtractedValue"
      }
    }
  },
  "other_functions": {
    "constructor": {
      "description": "Initializes the contract with the given name, symbol, decimals, and capacity.",
      "fields": {
        "name": "_name",
        "symbol": "_symbol",
        "decimals": "_decimals",
        "capacity": "_capacity"
      }
    },
    "cap": {
      "description": "Returns the maximum token supply.",
      "fields": {}
    },
    "balanceOf": {
      "description": "Returns the balance of `account`.",
      "fields": {
        "account": "_account"
      }
    },
    "totalSupply": {
      "description": "Returns the total supply of tokens.",
      "fields": {}
    },
    "name": {
      "description": "Returns the name of the token.",
      "fields": {}
    },
    "symbol": {
      "description": "Returns the symbol of the token.",
      "fields": {}
    },
    "decimals": {
      "description": "Returns the number of decimals used for the token.",
      "fields": {}
    },
    "domainSeparator": {
      "description": "Returns the domain separator used in EIP-712.",
      "fields": {}
    },
    "nonces": {
      "description": "Returns the nonce of `address`.",
      "fields": {
        "address": "_address"
      }
    },
    "depositAddress": {
      "description": "Returns the deposit address associated with a given `salt`.",
      "fields": {
        "salt": "_salt"
      }
    },
    "mint": {
      "description": "Mints `amount` new tokens and assigns them to the caller's account.",
      "fields": {
        "amount": "_amount"
      }
    },
    "burn": {
      "description": "Burns tokens from the caller's account using the provided `salt`.",
      "fields": {
        "salt": "_salt"
      }
    },
    "burnFrom": {
      "description": "Burns `amount` tokens from `account`'s balance.",
      "fields": {
        "account": "_account",
        "amount": "_amount"
      }
    },
    "permit": {
      "description": "Sets allowance using a permit signature.",
      "fields": {
        "issuer": "_issuer",
        "spender": "_spender",
        "value": "_value",
        "deadline": "_deadline",
        "v": "_v",
        "r": "_r",
        "s": "_s"
      }
    },
    "transferOwnership": {
      "description": "Transfers ownership of the contract to `newOwner`.",
      "fields": {
        "newOwner": "_newOwner"
      }
    },
    "owner": {
      "description": "Returns the current owner of the contract.",
      "fields": {}
    },
    "Approval": {
      "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
      "fields": {
        "owner": "_owner",
        "spender": "_spender",
        "value": "_value"
      }
    },
    "Transfer": {
      "description": "Emitted when `amount` tokens are transferred from `from` to `to`.",
      "fields": {
        "from": "_from",
        "to": "_to",
        "value": "_value"
      }
    },
    "OwnershipTransferred": {
      "description": "Emitted when ownership of the contract is transferred from `previousOwner` to `newOwner`.",
      "fields": {
        "previousOwner": "_previousOwner",
        "newOwner": "_newOwner"
      }
    },
    "CapExceeded": {
      "description": "Emitted when an operation exceeds the token cap.",
      "fields": {}
    },
    "InvalidAccount": {
      "description": "Emitted when an invalid account is used.",
      "fields": {}
    },
    "InvalidOwner": {
      "description": "Emitted when an invalid owner is referenced.",
      "fields": {}
    },
    "InvalidS": {
      "description": "Emitted when an invalid signature parameter `s` is encountered.",
      "fields": {}
    },
    "InvalidSignature": {
      "description": "Emitted when an invalid signature is provided.",
      "fields": {}
    },
    "InvalidV": {
      "description": "Emitted when an invalid signature parameter `v` is encountered.",
      "fields": {}
    },
    "NotOwner": {
      "description": "Emitted when an operation requires ownership but is performed by a non-owner.",
      "fields": {}
    },
    "PermitExpired": {
      "description": "Emitted when a permit has expired.",
      "fields": {}
    }
  }
}
