{
    "0xdAC17F958D2ee523a2206206994597C13D831ec7": {
        "transfer_functions": {
            "approve": {
                "description": "Allows the spender to withdraw from the caller's account, multiple times, up to the specified amount.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using an allowance mechanism.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "deprecate": {
                "description": "Marks the contract as deprecated, setting a new upgraded contract address.",
                "fields": {
                    "_upgradedAddress": "_upgradedAddress"
                }
            },
            "setParams": {
                "description": "Sets new fee parameters for transfers, including basis points and maximum fees.",
                "fields": {
                    "newBasisPoints": "newBasisPoints",
                    "newMaxFee": "newMaxFee"
                }
            },
            "issue": {
                "description": "Mints new tokens and adds them to the total supply.",
                "fields": {
                    "amount": "amount"
                }
            },
            "redeem": {
                "description": "Burns tokens from the total supply, reducing the overall supply.",
                "fields": {
                    "amount": "amount"
                }
            },
            "destroyBlackFunds": {
                "description": "Destroys the funds of a blacklisted address.",
                "fields": {
                    "_blackListedUser": "_blackListedUser"
                }
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "newOwner"
                }
            },
            "addBlackList": {
                "description": "Adds an address to the blacklist.",
                "fields": {
                    "_evilUser": "_evilUser"
                }
            },
            "removeBlackList": {
                "description": "Removes an address from the blacklist.",
                "fields": {
                    "_clearedUser": "_clearedUser"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "_totalSupply": {
                "description": "Returns the internal total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "who": "who"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to spend from the owner's account.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "upgradedAddress": {
                "description": "Returns the address of the upgraded contract, if any.",
                "fields": {}
            },
            "deprecated": {
                "description": "Indicates whether the contract is deprecated.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is currently paused.",
                "fields": {}
            },
            "getOwner": {
                "description": "Returns the address of the owner.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner's address.",
                "fields": {}
            },
            "getBlackListStatus": {
                "description": "Checks if a specified address is blacklisted.",
                "fields": {
                    "_maker": "_maker"
                }
            },
            "isBlackListed": {
                "description": "Returns whether the specified address is blacklisted.",
                "fields": {
                    "": ""
                }
            },
            "balances": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "": ""
                }
            },
            "allowed": {
                "description": "Returns the allowance that one address has on another.",
                "fields": {
                    "": ""
                }
            },
            "maximumFee": {
                "description": "Returns the maximum transaction fee allowed.",
                "fields": {}
            },
            "basisPointsRate": {
                "description": "Returns the fee basis points rate.",
                "fields": {}
            },
            "MAX_UINT": {
                "description": "Returns the maximum possible uint256 value.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses the contract, preventing any token transfers.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract, allowing token transfers to resume.",
                "fields": {}
            }
        }
    },
    "0xB8c77482e45F1F44dE1745F52C74426C631bDD52": {
        "transfer_functions": {
            "approve": {
                "description": "Allows a spender to withdraw from the caller\u00e2\u20ac\u2122s account up to the amount specified.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_value"
                }
            },
            "transfer": {
                "description": "Transfers tokens directly from the caller\u00e2\u20ac\u2122s address to another address.",
                "fields": {
                    "transfer_to": "_to",
                    "amount": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the sender.",
                "fields": {
                    "transfer_from": "_from",
                    "transfer_to": "_to",
                    "amount": "_value"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places for the token.",
                "fields": {}
            },
            "withdrawEther": {
                "description": "Withdraws Ether from the contract.",
                "fields": {
                    "amount": "amount"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens.",
                "fields": {
                    "amount": "_value"
                }
            },
            "unfreeze": {
                "description": "Unfreezes a specified amount of tokens.",
                "fields": {
                    "amount": "_value"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "address": ""
                }
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "freeze": {
                "description": "Freezes a specified amount of tokens.",
                "fields": {
                    "amount": "_value"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to withdraw.",
                "fields": {
                    "owner": "",
                    "spender": ""
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "Burn": {
                "description": "Emitted when tokens are burned.",
                "fields": {
                    "from": "_from",
                    "value": "_value"
                }
            },
            "Freeze": {
                "description": "Emitted when tokens are frozen.",
                "fields": {
                    "from": "_from",
                    "value": "_value"
                }
            },
            "Unfreeze": {
                "description": "Emitted when tokens are unfrozen.",
                "fields": {
                    "from": "_from",
                    "value": "_value"
                }
            }
        }
    },
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `value` amount of tokens from the caller's account to `to` address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `value` amount of tokens from `from` address to `to` address using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with initial token details.",
                "fields": {
                    "initialName": "_initialName",
                    "initialSymbol": "_initialSymbol",
                    "initSupply": "_initSupply",
                    "initialDecimals": "_initialDecimals"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets `value` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns `amount` of tokens from `account`, reducing the total supply.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used in token representation.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `amount` of tokens to `account`.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "setDecimals": {
                "description": "Sets a new number of decimals for the token.",
                "fields": {
                    "newDecimals": "_newDecimals"
                }
            },
            "setName": {
                "description": "Sets a new name for the token.",
                "fields": {
                    "newName": "_newName"
                }
            },
            "setSymbol": {
                "description": "Sets a new symbol for the token.",
                "fields": {
                    "newSymbol": "_newSymbol"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total number of tokens in circulation.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        }
    },
    "0x628F76eAB0C1298F7a24d337bBbF1ef8A1Ea6A24": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `value` amount of tokens from the caller's account to `to` address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `value` amount of tokens from `from` address to `to` address using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with initial token details.",
                "fields": {
                    "initialName": "_initialName",
                    "initialSymbol": "_initialSymbol",
                    "initSupply": "_initSupply",
                    "initialDecimals": "_initialDecimals"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets `value` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns `amount` of tokens from `account`, reducing the total supply.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used in token representation.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `amount` of tokens to `account`.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "setDecimals": {
                "description": "Sets a new number of decimals for the token.",
                "fields": {
                    "newDecimals": "_newDecimals"
                }
            },
            "setName": {
                "description": "Sets a new name for the token.",
                "fields": {
                    "newName": "_newName"
                }
            },
            "setSymbol": {
                "description": "Sets a new symbol for the token.",
                "fields": {
                    "newSymbol": "_newSymbol"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total number of tokens in circulation.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        }
    },
    "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84": {
        "transfer_functions": {},
        "other_functions": {
            "proxyType": {
                "description": "Returns the type of the proxy.",
                "fields": {
                    "proxyTypeId": "_proxyTypeId"
                }
            },
            "isDepositable": {
                "description": "Returns whether the proxy is depositable.",
                "fields": {}
            },
            "implementation": {
                "description": "Returns the address of the implementation contract.",
                "fields": {}
            },
            "appId": {
                "description": "Returns the application ID associated with the proxy.",
                "fields": {
                    "appId": "_appId"
                }
            },
            "kernel": {
                "description": "Returns the address of the kernel contract.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the proxy with kernel, appId, and initialize payload.",
                "fields": {
                    "_kernel": "_kernel",
                    "_appId": "_appId",
                    "_initializePayload": "_initializePayload"
                },
                "ProxyDeposit": {
                    "description": "Emitted when a deposit is made to the proxy.",
                    "fields": {
                        "sender": "_sender",
                        "value": "_value"
                    }
                }
            }
        }
    },
    "0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens from the sender's account to the recipient's account.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one account to another on behalf of the account holder.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the provided name, symbol, and initial set of addresses.",
                "fields": {
                    "name_": "_name",
                    "symbol_": "_symbol",
                    "initialSet": "_initialSet"
                }
            },
            "allowBurn": {
                "description": "Returns the current burn status.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Allows a spender to withdraw a specified amount of tokens from the caller's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for a specific account.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from a given address.",
                "fields": {
                    "amount": "_amount",
                    "addr": "_addr"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from the specified account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount",
                    "addr": "_addr"
                }
            },
            "checkSignature": {
                "description": "Checks the validity of a signature against a given digest.",
                "fields": {
                    "digest": "_digest",
                    "sig": "_sig"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "finishedVotings": {
                "description": "Checks if the voting process has been completed for a given ID.",
                "fields": {
                    "id": "_id"
                }
            },
            "getFullOracleSet": {
                "description": "Returns the list of current oracles.",
                "fields": {}
            },
            "getNewBurnStatusId": {
                "description": "Calculates a unique identifier based on new burn status and nonce.",
                "fields": {
                    "newBurnStatus": "_newBurnStatus",
                    "nonce": "_nonce"
                }
            },
            "getNewSetId": {
                "description": "Calculates a unique identifier for a new oracle set.",
                "fields": {
                    "oracleSetHash": "_oracleSetHash",
                    "set": "_set"
                }
            },
            "getSwapDataId": {
                "description": "Calculates a unique identifier for swap data.",
                "fields": {
                    "data": "_data"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "isOracle": {
                "description": "Checks if a given address is an oracle.",
                "fields": {
                    "address": "_address"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "oraclesSet": {
                "description": "Returns the address of a specific oracle set.",
                "fields": {
                    "index": "_index"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "voteForMinting": {
                "description": "Votes for minting new tokens.",
                "fields": {
                    "data": "_data",
                    "signatures": "_signatures"
                }
            },
            "voteForNewOracleSet": {
                "description": "Votes for a new set of oracles.",
                "fields": {
                    "oracleSetHash": "_oracleSetHash",
                    "newOracles": "_newOracles",
                    "signatures": "_signatures"
                }
            },
            "voteForSwitchBurn": {
                "description": "Votes to switch the burn status.",
                "fields": {
                    "newBurnStatus": "_newBurnStatus",
                    "nonce": "_nonce",
                    "signatures": "_signatures"
                }
            }
        }
    },
    "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0": {
        "transfer_functions": {
            "approve": {
                "description": "Allows a spender to withdraw from the caller\u00e2\u20ac\u2122s account up to the amount specified.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_value"
                }
            },
            "transfer": {
                "description": "Transfers tokens directly from the caller\u00e2\u20ac\u2122s address to another address.",
                "fields": {
                    "transfer_to": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the sender.",
                "fields": {
                    "transfer_from": "_sender",
                    "transfer_to": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the amount of tokens owned by the account.",
                "fields": {
                    "account": "_account"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "getStETHByWstETH": {
                "description": "Converts wstETH amount to stETH amount.",
                "fields": {
                    "wstETHAmount": "_wstETHAmount"
                }
            },
            "getWstETHByStETH": {
                "description": "Converts stETH amount to wstETH amount.",
                "fields": {
                    "stETHAmount": "_stETHAmount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for the given address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "permit": {
                "description": "Sets approval for a spender via signature.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "stETH": {
                "description": "Returns the address of the stETH contract.",
                "fields": {}
            },
            "stEthPerToken": {
                "description": "Returns the amount of stETH per token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "tokensPerStEth": {
                "description": "Returns the amount of tokens per stETH.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "unwrap": {
                "description": "Unwraps wstETH to stETH.",
                "fields": {
                    "wstETHAmount": "_wstETHAmount"
                }
            },
            "wrap": {
                "description": "Wraps stETH to wstETH.",
                "fields": {
                    "stETHAmount": "_stETHAmount"
                }
            }
        }
    },
    "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, given the spender's allowance.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Approves a spender to withdraw from the caller's account, up to the specified value.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance granted to a spender by the caller.",
                "fields": {
                    "_spender": "_spender",
                    "_addedValue": "_addedValue"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance granted to a spender by the caller.",
                "fields": {
                    "_spender": "_spender",
                    "_subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "mint": {
                "description": "Mints new tokens and assigns them to the specified address.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "value": "value"
                }
            },
            "pause": {
                "description": "Pauses the contract, preventing all token transfers and minting.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract, resuming normal operations.",
                "fields": {}
            },
            "reclaimToken": {
                "description": "Reclaims any ERC20 tokens that were sent to the contract by mistake.",
                "fields": {
                    "_token": "_token"
                }
            },
            "finishMinting": {
                "description": "Ends the minting process, preventing any further minting.",
                "fields": {}
            },
            "claimOwnership": {
                "description": "Claims ownership of the contract after a transfer.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "newOwner"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "pendingOwner": {
                "description": "Returns the address of the pending owner.",
                "fields": {}
            },
            "mintingFinished": {
                "description": "Returns whether the minting process has been finished.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is currently paused.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of an owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            }
        },
        "events": {
            "Pause": {
                "description": "Emitted when the contract is paused.",
                "fields": {}
            },
            "Unpause": {
                "description": "Emitted when the contract is unpaused.",
                "fields": {}
            },
            "Burn": {
                "description": "Emitted when tokens are burned.",
                "fields": {
                    "burner": "burner",
                    "value": "value"
                }
            },
            "Mint": {
                "description": "Emitted when new tokens are minted.",
                "fields": {
                    "to": "to",
                    "amount": "amount"
                }
            },
            "MintFinished": {
                "description": "Emitted when minting has been finished.",
                "fields": {}
            },
            "OwnershipRenounced": {
                "description": "Emitted when ownership of the contract is renounced.",
                "fields": {
                    "previousOwner": "previousOwner"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership of the contract is transferred.",
                "fields": {
                    "previousOwner": "previousOwner",
                    "newOwner": "newOwner"
                }
            },
            "Approval": {
                "description": "Emitted when a spender's allowance is approved.",
                "fields": {
                    "owner": "owner",
                    "spender": "spender",
                    "value": "value"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "from",
                    "to": "to",
                    "value": "value"
                }
            }
        }
    },
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": {
        "transfer_functions": {
            "approve": {
                "description": "Allows `guy` to spend `wad` on behalf of the caller.",
                "fields": {
                    "guy": "_address",
                    "wad": "_uint256"
                }
            },
            "transfer": {
                "description": "Transfers `wad` amount of tokens to the `dst` address.",
                "fields": {
                    "dst": "_address",
                    "wad": "_uint256"
                }
            },
            "transferFrom": {
                "description": "Transfers `wad` amount of tokens from `src` to `dst` on behalf of `src`.",
                "fields": {
                    "src": "_address",
                    "dst": "_address",
                    "wad": "_uint256"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of `address`.",
                "fields": {
                    "address": "_address"
                }
            },
            "withdraw": {
                "description": "Withdraws `wad` amount from the contract.",
                "fields": {
                    "wad": "_uint256"
                }
            },
            "deposit": {
                "description": "Deposits Ether into the contract.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that `guy` is allowed to spend on behalf of `src`.",
                "fields": {
                    "src": "_address",
                    "guy": "_address"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "Approval": {
                "description": "Emitted when `guy` is approved to spend `wad` on behalf of `src`.",
                "fields": {
                    "src": "_address",
                    "guy": "_address",
                    "wad": "_uint256"
                }
            },
            "Transfer": {
                "description": "Emitted when `wad` amount is transferred from `src` to `dst`.",
                "fields": {
                    "src": "_address",
                    "dst": "_address",
                    "wad": "_uint256"
                }
            },
            "Deposit": {
                "description": "Emitted when Ether is deposited into the contract.",
                "fields": {
                    "dst": "_address",
                    "wad": "_uint256"
                }
            },
            "Withdrawal": {
                "description": "Emitted when Ether is withdrawn from the contract.",
                "fields": {
                    "src": "_address",
                    "wad": "_uint256"
                }
            }
        }
    },
    "10x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE": {
        "transfer_functions": {
            "approve": {
                "description": "Sets the amount of tokens that an address can spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transfer": {
                "description": "Transfers tokens from the caller\u00e2\u20ac\u2122s address to another address.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens.",
                "fields": {
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred from one address to another.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is made for an address to spend tokens on behalf of the caller.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            }
        }
    },
    "0x514910771AF9Ca656af840dff83E8264EcF986CA": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another using an allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferAndCall": {
                "description": "Transfers a specified amount of tokens to a given address and executes a function call.",
                "fields": {
                    "to": "_to",
                    "value": "_value",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for a given address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Allows a spender to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance a spender has to spend tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance a spender has to spend tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "constructor": {
                "description": "Initializes the contract.",
                "fields": {}
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value",
                    "data": "_data"
                }
            },
            "Approval": {
                "description": "Emitted when a spender is approved or allowance is changed.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            }
        }
    },
    "10x6B175474E89094C44Da98b954EedeAC495271d0F": {
        "transfer": {
            "transfer": {
                "description": "Transfers `wad` amount of tokens to `dst` address.",
                "fields": {
                    "dst": "_dst",
                    "wad": "_wad"
                }
            },
            "transferFrom": {
                "description": "Transfers `wad` amount of tokens from `src` address to `dst` address.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "wad": "_wad"
                }
            },
            "move": {
                "description": "Moves `wad` amount of tokens from `src` address to `dst` address.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "wad": "_wad"
                }
            },
            "pull": {
                "description": "Pulls `wad` amount of tokens from `usr` address.",
                "fields": {
                    "usr": "_usr",
                    "wad": "_wad"
                }
            },
            "push": {
                "description": "Pushes `wad` amount of tokens to `usr` address.",
                "fields": {
                    "usr": "_usr",
                    "wad": "_wad"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given chain ID.",
                "fields": {
                    "chainId_": "_chainId_"
                }
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used for EIP-712.",
                "fields": {}
            },
            "PERMIT_TYPEHASH": {
                "description": "Returns the typehash for the permit function.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that `src` address is allowed to spend on behalf of `guy` address.",
                "fields": {
                    "src": "_src",
                    "guy": "_guy"
                }
            },
            "approve": {
                "description": "Approves `usr` address to spend `wad` amount of tokens.",
                "fields": {
                    "usr": "_usr",
                    "wad": "_wad"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of `address`.",
                "fields": {
                    "address": "_address"
                }
            },
            "burn": {
                "description": "Burns `wad` amount of tokens from `usr` address.",
                "fields": {
                    "usr": "_usr",
                    "wad": "_wad"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "deny": {
                "description": "Removes permission for `guy` address.",
                "fields": {
                    "guy": "_guy"
                }
            },
            "mint": {
                "description": "Mints `wad` amount of tokens to `usr` address.",
                "fields": {
                    "usr": "_usr",
                    "wad": "_wad"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for `address`.",
                "fields": {
                    "address": "_address"
                }
            },
            "permit": {
                "description": "Sets the allowance of `spender` for `holder` address with a permit signature.",
                "fields": {
                    "holder": "_holder",
                    "spender": "_spender",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "allowed": "_allowed",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "rely": {
                "description": "Adds `guy` address to the list of allowed addresses.",
                "fields": {
                    "guy": "_guy"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            },
            "wards": {
                "description": "Returns the wards associated with `address`.",
                "fields": {
                    "address": "_address"
                }
            },
            "Approval": {
                "description": "Emitted when `src` address approves `guy` address to spend `wad` amount of tokens.",
                "fields": {
                    "src": "_src",
                    "guy": "_guy",
                    "wad": "_wad"
                }
            },
            "LogNote": {
                "description": "Emitted when a note is logged.",
                "fields": {
                    "sig": "_sig",
                    "usr": "_usr",
                    "arg1": "_arg1",
                    "arg2": "_arg2",
                    "data": "_data"
                }
            },
            "Transfer": {
                "description": "Emitted when `src` address transfers `wad` amount of tokens to `dst` address.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "wad": "_wad"
                }
            }
        }
    },
    "10x2AF5D2aD76741191D15Dfe7bF6aC92d4Bd912Ca3": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to the specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the owner.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves the specified address to spend a certain amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "approveAndCall": {
                "description": "Approves the specified address to spend a certain amount of tokens and calls a function on the spender.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount",
                    "extraData": "_extraData"
                }
            },
            "generateTokens": {
                "description": "Generates new tokens and assigns them to the specified address.",
                "fields": {
                    "owner": "_owner",
                    "amount": "_amount"
                }
            },
            "destroyTokens": {
                "description": "Destroys tokens from the specified address.",
                "fields": {
                    "owner": "_owner",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "balanceOfAt": {
                "description": "Returns the balance of the specified address at a given block number.",
                "fields": {
                    "owner": "_owner",
                    "blockNumber": "_blockNumber"
                }
            },
            "totalSupplyAt": {
                "description": "Returns the total supply of tokens at a given block number.",
                "fields": {
                    "blockNumber": "_blockNumber"
                }
            },
            "transfersEnabled": {
                "description": "Returns whether transfers are enabled.",
                "fields": {}
            },
            "createCloneToken": {
                "description": "Creates a new clone token with specified parameters.",
                "fields": {
                    "cloneTokenName": "_cloneTokenName",
                    "cloneDecimalUnits": "_cloneDecimalUnits",
                    "cloneTokenSymbol": "_cloneTokenSymbol",
                    "snapshotBlock": "_snapshotBlock",
                    "transfersEnabled": "_transfersEnabled"
                }
            },
            "parentToken": {
                "description": "Returns the address of the parent token.",
                "fields": {}
            },
            "parentSnapShotBlock": {
                "description": "Returns the block number of the parent snapshot.",
                "fields": {}
            },
            "changeController": {
                "description": "Changes the controller of the contract.",
                "fields": {
                    "newController": "_newController"
                }
            },
            "enableTransfers": {
                "description": "Enables or disables transfers.",
                "fields": {
                    "transfersEnabled": "_transfersEnabled"
                }
            },
            "controller": {
                "description": "Returns the address of the current controller.",
                "fields": {}
            },
            "tokenFactory": {
                "description": "Returns the address of the token factory.",
                "fields": {}
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given token factory and initial owner.",
                "fields": {
                    "tokenFactory": "_tokenFactory",
                    "initialOwner": "initialOwner"
                }
            }
        },
        "events": {
            "ClaimedTokens": {
                "description": "Emitted when tokens are claimed.",
                "fields": {
                    "token": "_token",
                    "controller": "_controller",
                    "amount": "_amount"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "NewCloneToken": {
                "description": "Emitted when a new clone token is created.",
                "fields": {
                    "cloneToken": "_cloneToken",
                    "snapshotBlock": "_snapshotBlock"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "ControlTransferred": {
                "description": "Emitted when the control is transferred.",
                "fields": {
                    "previousControler": "_previousControler",
                    "newController": "_newController"
                }
            }
        }
    },
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another on behalf of the owner.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "rawAmount": "_rawAmount"
                }
            },
            "permit": {
                "description": "Allows a spender to withdraw tokens from an owner's account via a signed permit.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "rawAmount": "_rawAmount",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "mint": {
                "description": "Mints a specified amount of new tokens to a given address.",
                "fields": {
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "account": "_account",
                    "minter_": "_minter_",
                    "mintingAllowedAfter_": "_mintingAllowedAfter_"
                }
            },
            "DELEGATION_TYPEHASH": {
                "description": "Returns the type hash for delegations.",
                "fields": {}
            },
            "DOMAIN_TYPEHASH": {
                "description": "Returns the domain type hash for EIP712.",
                "fields": {}
            },
            "PERMIT_TYPEHASH": {
                "description": "Returns the type hash for permit.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens a spender is allowed to withdraw from an owner's account.",
                "fields": {
                    "account": "_account",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of a given account.",
                "fields": {
                    "account": "_account"
                }
            },
            "checkpoints": {
                "description": "Returns the voting checkpoints for a given account and block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "delegate": {
                "description": "Delegates voting power to a specified address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to a specified address via a signed message.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "delegates": {
                "description": "Returns the address to which the voting power is delegated for a given account.",
                "fields": {
                    "account": "_account"
                }
            },
            "getCurrentVotes": {
                "description": "Returns the current voting power of a given account.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPriorVotes": {
                "description": "Returns the voting power of a given account at a specific block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "minimumTimeBetweenMints": {
                "description": "Returns the minimum time required between mints.",
                "fields": {}
            },
            "mintCap": {
                "description": "Returns the cap on the number of tokens that can be minted.",
                "fields": {}
            },
            "minter": {
                "description": "Returns the current minter address.",
                "fields": {}
            },
            "mintingAllowedAfter": {
                "description": "Returns the timestamp after which minting is allowed.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for a given account.",
                "fields": {
                    "account": "_account"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for a given account.",
                "fields": {
                    "account": "_account"
                }
            },
            "setMinter": {
                "description": "Sets a new minter address.",
                "fields": {
                    "minter_": "_minter_"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x85F17Cf997934a597031b2E18a9aB6ebD4B9f6a4": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferToNear": {
                "description": "Initiates a transfer of tokens to a NEAR account.",
                "fields": {
                    "amount": "_amount",
                    "nearReceiverAccountId": "_nearReceiverAccountId"
                }
            },
            "finaliseNearToEthTransfer": {
                "description": "Finalizes a transfer of tokens from NEAR to Ethereum.",
                "fields": {
                    "proofData": "_proofData",
                    "proofBlockHeight": "_proofBlockHeight"
                }
            }
        },
        "other_functions": {
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "adminDelegatecall": {
                "description": "Executes a delegate call to an admin-specified address.",
                "fields": {
                    "target": "_target",
                    "data": "_data"
                }
            },
            "adminPause": {
                "description": "Pauses the contract with specified flags.",
                "fields": {
                    "flags": "_flags"
                }
            },
            "adminReceiveEth": {
                "description": "Allows the contract to receive Ether.",
                "fields": {}
            },
            "adminSendEth": {
                "description": "Allows the contract to send Ether to a specified address.",
                "fields": {
                    "destination": "_destination",
                    "amount": "_amount"
                }
            },
            "adminSstore": {
                "description": "Stores a value in the contract's storage.",
                "fields": {
                    "key": "_key",
                    "value": "_value"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that an owner allowed to a spender.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Allows a spender to withdraw tokens from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "minBlockAcceptanceHeight": {
                "description": "Returns the minimum block height required for acceptance.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nearConnector": {
                "description": "Returns the connector used for NEAR integration.",
                "fields": {}
            },
            "paused": {
                "description": "Returns the current pause status of the contract.",
                "fields": {}
            },
            "prover": {
                "description": "Returns the address of the NEAR prover contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "usedProofs": {
                "description": "Checks if a given proof has been used.",
                "fields": {
                    "proofId": "_proofId"
                }
            }
        }
    },
    "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee": {
        "transfer_functions": [],
        "other_functions": [
            {
                "name": "constructor",
                "description": "Initializes the contract with `_implementation` and `_data`.",
                "parameters": {
                    "implementation": "_to",
                    "data": "_data"
                }
            },
            {
                "name": "AdminChanged",
                "description": "Event triggered when the admin is changed from `previousAdmin` to `newAdmin`.",
                "parameters": {
                    "previousAdmin": "_from",
                    "newAdmin": "_to"
                }
            },
            {
                "name": "BeaconUpgraded",
                "description": "Event triggered when the beacon is upgraded.",
                "parameters": {
                    "beacon": "_to"
                }
            },
            {
                "name": "Upgraded",
                "description": "Event triggered when the implementation is upgraded.",
                "parameters": {
                    "implementation": "_to"
                }
            },
            {
                "name": "fallback",
                "description": "Fallback function that is called when a non-existent function is invoked or Ether is sent.",
                "parameters": {}
            },
            {
                "name": "receive",
                "description": "Receive function that is called when Ether is sent to the contract.",
                "parameters": {}
            }
        ]
    },
    "0x6982508145454Ce325dDbE47a25d4ec3d2311933": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to the recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from the sender to the recipient using the sender's allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the allowance of the spender to withdraw tokens from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of the spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of the spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given total supply.",
                "fields": {
                    "_totalSupply": "_totalSupply"
                }
            },
            "blacklist": {
                "description": "Adds or removes an address from the blacklist.",
                "fields": {
                    "_address": "_address",
                    "_isBlacklisting": "_isBlacklisting"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of the specified account.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "value": "_value"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "limited": {
                "description": "Returns whether the token is subject to holding limits.",
                "fields": {}
            },
            "maxHoldingAmount": {
                "description": "Returns the maximum holding amount allowed.",
                "fields": {}
            },
            "minHoldingAmount": {
                "description": "Returns the minimum holding amount required.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "setRule": {
                "description": "Sets rules for token holding limits and Uniswap pair address.",
                "fields": {
                    "_limited": "_limited",
                    "_uniswapV2Pair": "_uniswapV2Pair",
                    "_maxHoldingAmount": "_maxHoldingAmount",
                    "_minHoldingAmount": "_minHoldingAmount"
                }
            },
            "uniswapV2Pair": {
                "description": "Returns the address of the Uniswap V2 pair contract.",
                "fields": {}
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership is transferred.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Transfer": {
                "description": "Emitted when a transfer of tokens occurs.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0xaea46A60368A7bD060eec7DF8CBa43b7EF41Ad85": {
        "transfer_functions": {
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "transfer": {
                "description": "Transfers tokens from the caller's account to the specified recipient.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "mint": {
                "description": "Mints new tokens and assigns them to the specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from another address's account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "name": "_name",
                    "symbol": "_symbol",
                    "_initialSupply": "_initialSupply"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role identifier.",
                "fields": {}
            },
            "MINTER_ROLE": {
                "description": "Returns the minter role identifier.",
                "fields": {}
            },
            "PAUSER_ROLE": {
                "description": "Returns the pauser role identifier.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses all token transfers.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is paused.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses all token transfers.",
                "fields": {}
            },
            "getRoleAdmin": {
                "description": "Returns the admin role for a given role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getRoleMember": {
                "description": "Returns the member of a role at a given index.",
                "fields": {
                    "role": "_role",
                    "index": "_index"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members in a role.",
                "fields": {
                    "role": "_role"
                }
            },
            "grantRole": {
                "description": "Grants a role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "renounceRole": {
                "description": "Renounces a role from the caller.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            }
        }
    },
    "0x9D39A5DE30e57443BfF2A8307A4256c8797A3497": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to the specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the allowance of a spender over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given asset, initialRewarder, and owner addresses.",
                "fields": {
                    "_asset": "_asset",
                    "initialRewarder": "_initialRewarder",
                    "_owner": "_owner"
                }
            },
            "eip712Domain": {
                "description": "Returns the EIP712 domain details.",
                "fields": {}
            },
            "setCooldownDuration": {
                "description": "Sets the cooldown duration for the contract.",
                "fields": {
                    "duration": "_duration"
                }
            },
            "getUnvestedAmount": {
                "description": "Returns the amount that is not yet vested.",
                "fields": {}
            },
            "rescueTokens": {
                "description": "Rescues tokens from the contract to a specified address.",
                "fields": {
                    "token": "_token",
                    "amount": "_amount",
                    "to": "_to"
                }
            },
            "cooldownAssets": {
                "description": "Converts a specified amount of assets to shares for cooldown.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "cooldownShares": {
                "description": "Converts a specified amount of shares to assets for cooldown.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "previewDeposit": {
                "description": "Previews the amount of shares that would be received for a given deposit.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "previewMint": {
                "description": "Previews the amount of assets that would be minted for a given amount of shares.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "previewRedeem": {
                "description": "Previews the amount of assets that would be received for redeeming a specified amount of shares.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "previewWithdraw": {
                "description": "Previews the amount of shares that would be required to withdraw a specified amount of assets.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "transferAdmin": {
                "description": "Transfers the admin role to a new address.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "acceptAdmin": {
                "description": "Accepts the admin role transfer.",
                "fields": {}
            },
            "addToBlacklist": {
                "description": "Adds an address to the blacklist.",
                "fields": {
                    "target": "_target",
                    "isFullBlacklisting": "_isFullBlacklisting"
                }
            },
            "removeFromBlacklist": {
                "description": "Removes an address from the blacklist.",
                "fields": {
                    "target": "_target",
                    "isFullBlacklisting": "_isFullBlacklisting"
                }
            },
            "redistributeLockedAmount": {
                "description": "Redistributes the locked amount from one address to another.",
                "fields": {
                    "from": "_from",
                    "to": "_to"
                }
            },
            "transferInRewards": {
                "description": "Transfers rewards into the contract.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "unstake": {
                "description": "Unstakes assets from the contract.",
                "fields": {
                    "receiver": "_receiver"
                }
            },
            "withdraw": {
                "description": "Withdraws a specified amount of assets and returns the amount of shares.",
                "fields": {
                    "assets": "_assets",
                    "receiver": "_receiver",
                    "_owner": "_owner"
                }
            },
            "redeem": {
                "description": "Redeems a specified amount of shares and returns the amount of assets.",
                "fields": {
                    "shares": "_shares",
                    "receiver": "_receiver",
                    "_owner": "_owner"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        }
    },
    "0x4c9EDD5852cd905f086C759E8383e09bff1E68B3": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the token holder.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to withdraw a specified amount of tokens from the caller's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of the token holder.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given admin address.",
                "fields": {
                    "admin": "_admin"
                }
            },
            "acceptOwnership": {
                "description": "Accepts the transfer of ownership.",
                "fields": {}
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a specified account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "mint": {
                "description": "Mints a specified amount of tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "setMinter": {
                "description": "Sets a new minter address.",
                "fields": {
                    "newMinter": "_newMinter"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "eip712Domain": {
                "description": "Returns the EIP712 domain information.",
                "fields": {}
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator for EIP712.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce for a specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "permit": {
                "description": "Allows a spender to spend tokens on behalf of the owner via EIP712.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "pendingOwner": {
                "description": "Returns the address of the pending owner.",
                "fields": {}
            }
        }
    },
    "0xc5f0f7b66764F6ec8C8Dff7BA683102295E16409": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "admin_": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x75231F58b43240C9718Dd58B4967c5114342a86c": {
        "transfer_functions": {
            "transferProxyOwnership": {
                "description": "Transfers the ownership of the proxy contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        },
        "other_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "implementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "implementation": "_newImplementation",
                    "data": "_data"
                }
            },
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "proxyOwner": {
                "description": "Returns the current owner of the proxy contract.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with no specific inputs required.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "ProxyOwnershipTransferred": {
                "description": "Emitted when the ownership of the proxy contract is transferred.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a certain amount of tokens from the caller's address to a specified address.",
                "fields": {
                    "to": "Recipient address",
                    "amount": "Amount of tokens to transfer"
                }
            },
            "transferFrom": {
                "description": "Transfers a certain amount of tokens from a specified address to another address on behalf of the token holder.",
                "fields": {
                    "from": "Source address",
                    "to": "Destination address",
                    "amount": "Amount of tokens to transfer"
                }
            },
            "approve": {
                "description": "Approves the specified spender to spend a certain amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "Address authorized to spend",
                    "amount": "Amount of tokens to approve"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "Owner of tokens",
                    "spender": "Spender allowed to use the tokens"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "Address to which the allowance is being increased",
                    "addedValue": "Amount to increase the allowance by"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "Address for which the allowance is being decreased",
                    "subtractedValue": "Amount to decrease the allowance by"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is granted to a spender.",
                "fields": {
                    "owner": "Address of the token owner",
                    "spender": "Address authorized to spend",
                    "value": "Amount of tokens approved"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred from one account to another.",
                "fields": {
                    "from": "Address from which the tokens are transferred",
                    "to": "Address to which the tokens are transferred",
                    "value": "Amount of tokens transferred"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with multiple roles and manager addresses.",
                "fields": {
                    "migration": "Migration contract address",
                    "emissionManager": "Emission manager address",
                    "protocolCouncil": "Protocol council address",
                    "emergencyCouncil": "Emergency council address"
                }
            },
            "CAP_MANAGER_ROLE": {
                "description": "Returns the bytes32 hash of the Cap Manager role.",
                "fields": {}
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the bytes32 hash of the Default Admin role.",
                "fields": {}
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the EIP-712 domain separator for the contract.",
                "fields": {}
            },
            "EMISSION_ROLE": {
                "description": "Returns the bytes32 hash of the Emission Role.",
                "fields": {}
            },
            "PERMIT2": {
                "description": "Returns the address of the Permit2 contract.",
                "fields": {}
            },
            "PERMIT2_REVOKER_ROLE": {
                "description": "Returns the bytes32 hash of the Permit2 Revoker Role.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used to get the user representation of the token.",
                "fields": {}
            },
            "eip712Domain": {
                "description": "Returns details about the EIP-712 domain used by the contract.",
                "fields": {
                    "fields": "Domain fields",
                    "name": "Domain name",
                    "version": "Domain version",
                    "chainId": "Blockchain chain ID",
                    "verifyingContract": "Address of the contract verifying the domain",
                    "salt": "Salt used in the domain",
                    "extensions": "Extensions of the domain"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role that controls a specific role.",
                "fields": {
                    "role": "Bytes32 hash of the role"
                }
            },
            "getRoleMember": {
                "description": "Returns the address of the member that holds a specific role.",
                "fields": {
                    "role": "Bytes32 hash of the role",
                    "index": "Index of the member"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members that hold a specific role.",
                "fields": {
                    "role": "Bytes32 hash of the role"
                }
            },
            "grantRole": {
                "description": "Grants a specific role to an account.",
                "fields": {
                    "role": "Bytes32 hash of the role",
                    "account": "Address of the account to be granted the role"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "Bytes32 hash of the role",
                    "account": "Address of the account"
                }
            },
            "lastMint": {
                "description": "Returns the timestamp of the last mint operation.",
                "fields": {}
            },
            "mint": {
                "description": "Mints new tokens to a specified address.",
                "fields": {
                    "to": "Address receiving the newly minted tokens",
                    "amount": "Amount of tokens to mint"
                }
            },
            "mintPerSecondCap": {
                "description": "Returns the maximum mint cap per second.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce associated with a token owner.",
                "fields": {
                    "owner": "Address of the token owner"
                }
            },
            "permit": {
                "description": "Allows a token owner to approve a spender via a signed message.",
                "fields": {
                    "owner": "Owner of the tokens",
                    "spender": "Spender being approved",
                    "value": "Amount of tokens to approve",
                    "deadline": "Expiration timestamp",
                    "v": "V value of the signature",
                    "r": "R value of the signature",
                    "s": "S value of the signature"
                }
            },
            "permit2Enabled": {
                "description": "Checks if Permit2 is enabled.",
                "fields": {}
            },
            "renounceRole": {
                "description": "Allows an account to renounce its role.",
                "fields": {
                    "role": "Bytes32 hash of the role",
                    "account": "Address of the account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from an account.",
                "fields": {
                    "role": "Bytes32 hash of the role",
                    "account": "Address of the account"
                }
            },
            "supportsInterface": {
                "description": "Checks if a certain interface is supported by the contract.",
                "fields": {
                    "interfaceId": "Bytes4 identifier of the interface"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "updateMintCap": {
                "description": "Updates the mint cap.",
                "fields": {
                    "newCap": "New mint cap"
                }
            },
            "updatePermit2Allowance": {
                "description": "Updates the Permit2 allowance state.",
                "fields": {
                    "enabled": "True if Permit2 allowance is enabled"
                }
            },
            "version": {
                "description": "Returns the version of the token contract.",
                "fields": {}
            }
        }
    },
    "0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another, given approval.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Approves the spender to withdraw tokens from your account.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the amount of tokens a spender is allowed to withdraw.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the amount of tokens a spender is allowed to withdraw.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "setTransferAgent": {
                "description": "Assigns or removes a transfer agent.",
                "fields": {
                    "address": "addr",
                    "state": "state"
                }
            },
            "releaseTokenTransfer": {
                "description": "Releases the token transfer once conditions are met.",
                "fields": {}
            }
        },
        "other_functions": {
            "mint": {
                "description": "Mints new tokens and assigns them to an address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "finishMinting": {
                "description": "Finishes the minting process.",
                "fields": {}
            },
            "mintingFinished": {
                "description": "Returns whether minting is finished.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "totalSupply": {
                "description": "Returns the total token supply.",
                "fields": {}
            },
            "upgrade": {
                "description": "Upgrades the contract with a new version.",
                "fields": {
                    "value": "value"
                }
            },
            "upgradeAgent": {
                "description": "Returns the upgrade agent address.",
                "fields": {}
            },
            "setUpgradeAgent": {
                "description": "Sets a new upgrade agent address.",
                "fields": {
                    "agent": "agent"
                }
            },
            "canUpgrade": {
                "description": "Checks if the token can be upgraded.",
                "fields": {}
            },
            "getUpgradeState": {
                "description": "Returns the upgrade state of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the owner address of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new owner.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "setReleaseAgent": {
                "description": "Sets an agent to release the tokens.",
                "fields": {
                    "address": "addr"
                }
            },
            "released": {
                "description": "Checks if the token has been released for transfers.",
                "fields": {}
            },
            "name": {
                "description": "Returns the token name.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the token symbol.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the token's decimal places.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the allowance for a spender.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "releaseAgent": {
                "description": "Returns the release agent address.",
                "fields": {}
            },
            "totalUpgraded": {
                "description": "Returns the total upgraded tokens.",
                "fields": {}
            }
        }
    },
    "0x6e1A19F235bE7ED8E3369eF73b196C07257494DE": {
        "transfer_functions": {},
        "other_functions": {},
        "errors": {},
        "events": {}
    },
    "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x4da27a545c0c5B758a6BA100e3a049001de870f5": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "initialize": {
                "description": "Initializes the contract with the given implementation address and admin.",
                "fields": {
                    "_logic": "_logic",
                    "_admin": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0xF57e7e7C23978C3cAEC3C3548E3D615c346e79fF": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens from the caller to a recipient.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given minter address.",
                "fields": {
                    "minter": "_minter"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role.",
                "fields": {}
            },
            "MINTER_ROLE": {
                "description": "Returns the minter role.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "cap": {
                "description": "Returns the maximum supply of tokens.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places for token amounts.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role of the specified role.",
                "fields": {
                    "role": "_role"
                }
            },
            "grantRole": {
                "description": "Grants a role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "mint": {
                "description": "Mints a specified amount of new tokens and assigns them to an address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "renounceRole": {
                "description": "Renounces a role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x6De037ef9aD2725EB40118Bb1702EBb27e4Aeb24": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x3c3a81e81dc49A522A592e7622A7E711c06bf354": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function to accept Ether transfers.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            }
        }
    },
    "0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1": {
        "transfer_and_upgrade_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "admin_": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function to accept Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address changes.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0": {
        "transfer": {
            "transfer": {
                "description": "Transfers `value` amount of tokens to the `to` address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `value` amount of tokens from `from` address to `to` address using allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the `owner` address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend from `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets `value` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "pause": {
                "description": "Pauses all token transfers.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses all token transfers.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is paused.",
                "fields": {}
            },
            "isPauser": {
                "description": "Checks if `account` is a pauser.",
                "fields": {
                    "account": "_account"
                }
            },
            "addPauser": {
                "description": "Adds `account` as a pauser.",
                "fields": {
                    "account": "_account"
                }
            },
            "renouncePauser": {
                "description": "Renounces the pauser role of the caller.",
                "fields": {}
            },
            "PauserAdded": {
                "description": "Emitted when a new pauser is added.",
                "fields": {
                    "account": "_account"
                }
            },
            "PauserRemoved": {
                "description": "Emitted when a pauser is removed.",
                "fields": {
                    "account": "_account"
                }
            },
            "Paused": {
                "description": "Emitted when the contract is paused.",
                "fields": {
                    "account": "_account"
                }
            },
            "Unpaused": {
                "description": "Emitted when the contract is unpaused.",
                "fields": {
                    "account": "_account"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when an allowance is set or increased.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            }
        }
    },
    "0xD850942eF8811f2A866692A623011bDE52a462C1": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller's account to the specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using an allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "approveAndCall": {
                "description": "Approves a spender to spend a specified amount of tokens and calls a function on the spender contract.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value",
                    "extraData": "_extraData"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "setOwner": {
                "description": "Sets a new owner for the contract.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "seal": {
                "description": "Seals the contract, preventing further minting.",
                "fields": {}
            },
            "offerBonus": {
                "description": "Offers a bonus to the specified amount.",
                "fields": {
                    "bonus": "_bonus"
                }
            },
            "isSealed": {
                "description": "Checks if the contract is sealed.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "lastMintedTimestamp": {
                "description": "Returns the timestamp of the last mint operation.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "mint": {
                "description": "Mints new tokens and assigns them to the specified address.",
                "fields": {
                    "owner": "_owner",
                    "amount": "_amount",
                    "isRaw": "_isRaw",
                    "timestamp": "timestamp"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "constructor": {
                "description": "Initializes the contract.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            }
        }
    },
    "0xe28b3B32B6c345A34Ff64674606124Dd5Aceca30": {
        "transfer": {
            "description": "Functions related to transferring tokens.",
            "functions": {
                "transfer": {
                    "description": "Transfers `amount` of tokens to `recipient`.",
                    "fields": {
                        "recipient": "_recipient",
                        "amount": "_amount"
                    }
                },
                "transferFrom": {
                    "description": "Transfers `amount` of tokens from `sender` to `recipient`.",
                    "fields": {
                        "sender": "_sender",
                        "recipient": "_recipient",
                        "amount": "_amount"
                    }
                }
            }
        },
        "other_functions": {
            "description": "Other functions in the contract.",
            "functions": {
                "constructor": {
                    "description": "Initializes the contract with the given custodian address.",
                    "fields": {
                        "custodian": "_custodian"
                    }
                },
                "allowance": {
                    "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                    "fields": {
                        "owner": "_owner",
                        "spender": "_spender"
                    }
                },
                "approve": {
                    "description": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
                    "fields": {
                        "spender": "_spender",
                        "amount": "_amount"
                    }
                },
                "balanceOf": {
                    "description": "Returns the number of tokens owned by `account`.",
                    "fields": {
                        "account": "_account"
                    }
                },
                "decimals": {
                    "description": "Returns the number of decimals the token uses.",
                    "fields": {}
                },
                "decreaseAllowance": {
                    "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                    "fields": {
                        "spender": "_spender",
                        "subtractedValue": "_subtractedValue"
                    }
                },
                "increaseAllowance": {
                    "description": "Increases the allowance of `spender` by `addedValue`.",
                    "fields": {
                        "spender": "_spender",
                        "addedValue": "_addedValue"
                    }
                },
                "name": {
                    "description": "Returns the name of the token.",
                    "fields": {}
                },
                "symbol": {
                    "description": "Returns the symbol of the token.",
                    "fields": {}
                },
                "totalSupply": {
                    "description": "Returns the total supply of the token.",
                    "fields": {}
                }
            }
        }
    },
    "0x925206b8a707096Ed26ae47C84747fE0bb734F59": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to a specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of a spender.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "user": "_user",
                    "spender": "_spender"
                }
            },
            "blacklistAccount": {
                "description": "Blacklists or un-blacklists an account.",
                "fields": {
                    "account": "_account",
                    "sign": "_sign"
                }
            },
            "destroyBlackFunds": {
                "description": "Destroys the funds of a blacklisted account.",
                "fields": {
                    "_blackListedUser": "_blackListedUser"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a specific address.",
                "fields": {
                    "user": "_user"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "user": "_user",
                    "spender": "_spender"
                }
            },
            "isBlacklisted": {
                "description": "Checks if an address is blacklisted.",
                "fields": {
                    "maker": "_maker"
                }
            },
            "isOwner": {
                "description": "Checks if an address is the owner of the contract.",
                "fields": {
                    "userAddress": "_userAddress"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses the contract, preventing certain functions from being executed.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract, allowing functions to be executed again.",
                "fields": {}
            },
            "paused": {
                "description": "Returns the pause status of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            }
        }
    },
    "0x8D983cb9388EaC77af0474fA441C4815500Cb7BB": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to the specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the sender.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that the spender can spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that the spender can spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that the spender can spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "blacklistAccount": {
                "description": "Adds or removes an account from the blacklist.",
                "fields": {
                    "account": "_account",
                    "sign": "_sign"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "isBlacklisted": {
                "description": "Checks if an address is blacklisted.",
                "fields": {
                    "maker": "_maker"
                }
            },
            "isOwner": {
                "description": "Checks if an address is the owner of the contract.",
                "fields": {
                    "userAddress": "_userAddress"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses all token transfers.",
                "fields": {}
            },
            "paused": {
                "description": "Checks if the contract is currently paused.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "unpause": {
                "description": "Unpauses all token transfers.",
                "fields": {}
            }
        }
    },
    "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "dst": "_destinationAddress",
                    "wad": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another.",
                "fields": {
                    "src": "_sourceAddress",
                    "dst": "_destinationAddress",
                    "wad": "_amount"
                }
            },
            "approve": {
                "description": "Approves a given address to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "guy": "_spenderAddress",
                    "wad": "_amount"
                }
            },
            "push": {
                "description": "Pushes a specified amount of tokens to a given address.",
                "fields": {
                    "dst": "_destinationAddress",
                    "wad": "_amount"
                }
            },
            "pull": {
                "description": "Pulls a specified amount of tokens from a given address.",
                "fields": {
                    "src": "_sourceAddress",
                    "wad": "_amount"
                }
            },
            "move": {
                "description": "Moves a specified amount of tokens from one address to another without changing the approval.",
                "fields": {
                    "src": "_sourceAddress",
                    "dst": "_destinationAddress",
                    "wad": "_amount"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "src": "_address"
                }
            },
            "stopped": {
                "description": "Returns whether the contract is stopped.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "authority": {
                "description": "Returns the current authority address.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "src": "_ownerAddress",
                    "guy": "_spenderAddress"
                }
            },
            "setOwner": {
                "description": "Sets a new owner of the contract.",
                "fields": {
                    "owner_": "_newOwnerAddress"
                }
            },
            "setAuthority": {
                "description": "Sets a new authority address.",
                "fields": {
                    "authority_": "_newAuthorityAddress"
                }
            },
            "mint": {
                "description": "Mints a specified amount of tokens to a given address.",
                "fields": {
                    "guy": "_recipientAddress",
                    "wad": "_amount"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's address.",
                "fields": {
                    "wad": "_amount"
                }
            },
            "start": {
                "description": "Starts the contract.",
                "fields": {}
            },
            "stop": {
                "description": "Stops the contract.",
                "fields": {}
            },
            "setName": {
                "description": "Sets the name of the token.",
                "fields": {
                    "name_": "_name"
                }
            }
        }
    },
    "0xc944E90C64B2c07662A292be6244BDf05Cda44a7": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to `recipient`.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `sender` to `recipient` using allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Allows `spender` to withdraw `amount` tokens from the caller's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given initial supply.",
                "fields": {
                    "_initialSupply": "_initialSupply"
                }
            },
            "acceptOwnership": {
                "description": "Accepts the ownership of the contract from the pending governor.",
                "fields": {}
            },
            "addMinter": {
                "description": "Adds a new minter account.",
                "fields": {
                    "_account": "_account"
                }
            },
            "removeMinter": {
                "description": "Removes a minter account.",
                "fields": {
                    "_account": "_account"
                }
            },
            "renounceMinter": {
                "description": "Renounces the minter role of the caller.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `_amount` new tokens to `_to`.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns `_amount` tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns `_amount` tokens from `_account`.",
                "fields": {
                    "_account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used for the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of `_account`.",
                "fields": {
                    "_account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that `spender` is allowed to withdraw from `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "governor": {
                "description": "Returns the current governor of the contract.",
                "fields": {}
            },
            "pendingGovernor": {
                "description": "Returns the address of the pending governor.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `_newGovernor`.",
                "fields": {
                    "_newGovernor": "_newGovernor"
                }
            },
            "permit": {
                "description": "Allows `spender` to withdraw `_value` tokens from `_owner` using a signature.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "isMinter": {
                "description": "Checks if `_account` is a minter.",
                "fields": {
                    "_account": "_account"
                }
            }
        }
    },
    "0x54D2252757e1672EEaD234D27B1270728fF90581": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, using an allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "name": "_name",
                    "symbol": "_symbol",
                    "vault": "_vault"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0xae78736Cd615f374D3085123A210448E74Fc6393": {
        "transfer_functions": {
            "approve": {
                "description": "Sets the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "transfer": {
                "description": "Transfers tokens from the caller to the specified recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using the allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance that a spender has on the owner's tokens.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance that a spender has on the owner's tokens.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the RocketStorageInterface address.",
                "fields": {
                    "_rocketStorageAddress": "_rocketStorageAddress"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "_rethAmount": "_rethAmount"
                }
            },
            "depositExcess": {
                "description": "Allows the caller to deposit excess Ether.",
                "fields": {}
            },
            "depositExcessCollateral": {
                "description": "Allows the caller to deposit excess collateral.",
                "fields": {}
            },
            "getCollateralRate": {
                "description": "Returns the current collateral rate.",
                "fields": {}
            },
            "getEthValue": {
                "description": "Returns the Ether value of a specified amount of tokens.",
                "fields": {
                    "_rethAmount": "_rethAmount"
                }
            },
            "getExchangeRate": {
                "description": "Returns the current exchange rate between tokens and Ether.",
                "fields": {}
            },
            "getRethValue": {
                "description": "Returns the token value of a specified amount of Ether.",
                "fields": {
                    "_ethAmount": "_ethAmount"
                }
            },
            "getTotalCollateral": {
                "description": "Returns the total amount of collateral held.",
                "fields": {}
            },
            "mint": {
                "description": "Mints new tokens and assigns them to a specified address.",
                "fields": {
                    "_ethAmount": "_ethAmount",
                    "_to": "_to"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            },
            "receive": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        }
    },
    "0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from a specified address to another address.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with given parameters.",
                "fields": {
                    "name_": "_name",
                    "symbol_": "_symbol",
                    "taxHandlerAddress": "_taxHandlerAddress",
                    "treasuryHandlerAddress": "_treasuryHandlerAddress"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "delegate": {
                "description": "Delegates voting power to a specified address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to a specified address using a signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "delegates": {
                "description": "Returns the delegate address of a specified address.",
                "fields": {
                    "address": "_address"
                }
            },
            "getVotesAtBlock": {
                "description": "Returns the number of votes a specified address had at a particular block.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoints for a specified address.",
                "fields": {
                    "address": "_address",
                    "blockNumber": "_blockNumber"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for a specified address.",
                "fields": {
                    "address": "_address"
                }
            },
            "taxHandler": {
                "description": "Returns the address of the tax handler contract.",
                "fields": {}
            },
            "setTaxHandler": {
                "description": "Sets a new tax handler contract address.",
                "fields": {
                    "taxHandlerAddress": "_taxHandlerAddress"
                }
            },
            "treasuryHandler": {
                "description": "Returns the address of the treasury handler contract.",
                "fields": {}
            },
            "setTreasuryHandler": {
                "description": "Sets a new treasury handler contract address.",
                "fields": {
                    "treasuryHandlerAddress": "_treasuryHandlerAddress"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "DELEGATION_TYPEHASH": {
                "description": "Returns the typehash for delegation.",
                "fields": {}
            },
            "DOMAIN_TYPEHASH": {
                "description": "Returns the domain typehash.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for a specified address.",
                "fields": {
                    "address": "_address"
                }
            }
        }
    },
    "0x3883f5e181fccaF8410FA61e12b59BAd963fb645": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `_amount` tokens from the caller's address to the `_to` address.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `_amount` tokens from `_from` address to `_to` address on behalf of the caller.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves the `_spender` address to spend `_value` tokens on behalf of the caller.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "allowPrecirculation": {
                "description": "Allows `_addr` address to pre-circulate tokens.",
                "fields": {
                    "_addr": "_addr"
                }
            },
            "disallowPrecirculation": {
                "description": "Disallows `_addr` address from pre-circulating tokens.",
                "fields": {
                    "_addr": "_addr"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for a given `_owner` address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `_spender` is allowed to spend on behalf of `_owner`.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "getController": {
                "description": "Returns the address of the current controller.",
                "fields": {}
            },
            "controller": {
                "description": "Returns the address of the current controller.",
                "fields": {}
            },
            "changeController": {
                "description": "Changes the controller to a new `_newController` address.",
                "fields": {
                    "_newController": "_newController"
                }
            },
            "mint": {
                "description": "Mints `_amount` new tokens to `_owner` address.",
                "fields": {
                    "_owner": "_owner",
                    "_amount": "_amount"
                }
            },
            "changeUnlockTime": {
                "description": "Sets a new unlock time for token transfers.",
                "fields": {
                    "_unlockTime": "_unlockTime"
                }
            },
            "getUnlockTime": {
                "description": "Returns the current unlock time for token transfers.",
                "fields": {}
            },
            "isPrecirculationAllowed": {
                "description": "Checks if pre-circulation is allowed for the `_addr` address.",
                "fields": {
                    "_addr": "_addr"
                }
            },
            "constructor": {
                "description": "Initializes the contract with the given unlock time.",
                "fields": {
                    "_unlockTime": "_unlockTime"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "Transfer": {
                "description": "Emitted when a transfer of tokens occurs.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when an approval of token spending occurs.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender",
                    "_value": "_value"
                }
            }
        }
    },
    "0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa": {
        "transfer_functions": {},
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "admin_": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            }
        }
    },
    "0x4a220E6096B25EADb88358cb44068A3248254675": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens on behalf of another address.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Approves a spender to withdraw tokens from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens a spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            }
        },
        "other_functions": {
            "mint": {
                "description": "Mints new tokens and assigns them to the specified address.",
                "fields": {
                    "address": "_address",
                    "value": "_value"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "DECIMAL_ZEROS": {
                "description": "Returns the number of zero decimal places of the token.",
                "fields": {}
            },
            "crowdsale": {
                "description": "Returns the address of the crowdsale contract.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given crowdsale address.",
                "fields": {
                    "crowdsale": "_crowdsale"
                }
            },
            "Approval": {
                "description": "Emitted when a token approval is granted.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "value"
                }
            },
            "Transfer": {
                "description": "Emitted when a token transfer occurs.",
                "fields": {
                    "from": "from",
                    "to": "to",
                    "value": "value"
                }
            }
        }
    },
    "0xf34960d9d60be18cC1D5Afc1A6F012A723a28811": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified recipient.",
                "fields": {
                    "recipient": "recipient",
                    "amount": "amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens on behalf of the sender, with allowance.",
                "fields": {
                    "sender": "sender",
                    "recipient": "recipient",
                    "amount": "amount"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is given for a spender by an owner.",
                "fields": {
                    "owner": "owner",
                    "spender": "spender",
                    "value": "value"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "owner",
                    "spender": "spender"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "spender",
                    "amount": "amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance for a spender.",
                "fields": {
                    "spender": "spender",
                    "addedValue": "addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance for a spender.",
                "fields": {
                    "spender": "spender",
                    "subtractedValue": "subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given initial supply of tokens.",
                "fields": {
                    "initialSupply": "initialSupply"
                }
            },
            "blacklist": {
                "description": "Adds an account to the blacklist.",
                "fields": {
                    "_account": "_account"
                }
            },
            "unBlacklist": {
                "description": "Removes an account from the blacklist.",
                "fields": {
                    "_account": "_account"
                }
            },
            "updateBlacklister": {
                "description": "Updates the blacklister address.",
                "fields": {
                    "_newBlacklister": "_newBlacklister"
                }
            },
            "blacklister": {
                "description": "Returns the current blacklister address.",
                "fields": {}
            },
            "isBlacklisted": {
                "description": "Checks if an account is blacklisted.",
                "fields": {
                    "_account": "_account"
                }
            },
            "burn": {
                "description": "Burns a specific amount of tokens from the caller's balance.",
                "fields": {
                    "amount": "amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specific amount of tokens from a specified account, reducing the allowance.",
                "fields": {
                    "account": "account",
                    "amount": "amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specified account.",
                "fields": {
                    "account": "account"
                }
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces the ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new owner.",
                "fields": {
                    "newOwner": "newOwner"
                }
            },
            "Blacklisted": {
                "description": "Emitted when an account is blacklisted.",
                "fields": {
                    "_account": "_account"
                }
            },
            "UnBlacklisted": {
                "description": "Emitted when an account is removed from the blacklist.",
                "fields": {
                    "_account": "_account"
                }
            },
            "BlacklisterChanged": {
                "description": "Emitted when the blacklister is updated.",
                "fields": {
                    "newBlacklister": "newBlacklister"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when the ownership of the contract is transferred.",
                "fields": {
                    "previousOwner": "previousOwner",
                    "newOwner": "newOwner"
                }
            }
        }
    },
    "0xfAbA6f8e4a5E8Ab82F62fe7C39859FA577269BE3": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller's account to the specified address.",
                "fields": {
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another, based on the allowance set.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            },
            "approve": {
                "description": "Approves the specified address to spend a certain amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "rawAmount": "_rawAmount"
                }
            },
            "enableTransfer": {
                "description": "Enables token transfers.",
                "fields": {}
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "_governance": "_governance",
                    "_cliffTimestamp": "_cliffTimestamp",
                    "_tranche1VestingPeriod": "_tranche1VestingPeriod",
                    "_tranche2VestingPeriod": "_tranche2VestingPeriod",
                    "_seedVestingPeriod": "_seedVestingPeriod"
                }
            },
            "updateCliffTimestamp": {
                "description": "Updates the cliff timestamp.",
                "fields": {
                    "newTimestamp": "_newTimestamp"
                }
            },
            "updateTrancheBalance": {
                "description": "Updates the balance for a specific tranche for a beneficiary.",
                "fields": {
                    "beneficiary": "_beneficiary",
                    "rawAmount": "_rawAmount",
                    "investorType": "_investorType"
                }
            },
            "mint": {
                "description": "Mints new tokens to the specified address.",
                "fields": {
                    "account": "_account",
                    "rawAmount": "_rawAmount"
                }
            },
            "getVestedBalance": {
                "description": "Returns the vested balance for the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getFreedBalance": {
                "description": "Returns the freed balance for the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getCurrentVotes": {
                "description": "Returns the current voting balance for the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPriorVotes": {
                "description": "Returns the voting balance at a specific block number for the specified address.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "hasRole": {
                "description": "Checks if the specified address has a particular role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "grantRole": {
                "description": "Grants a specific role to the specified address.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a specific role from the specified address.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "renounceRole": {
                "description": "Renounces a specific role for the caller.",
                "fields": {
                    "role": "_role"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places for the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "cliffTimestamp": {
                "description": "Returns the current cliff timestamp.",
                "fields": {}
            },
            "tranche1VestingPeriod": {
                "description": "Returns the vesting period for tranche 1.",
                "fields": {}
            },
            "tranche2VestingPeriod": {
                "description": "Returns the vesting period for tranche 2.",
                "fields": {}
            },
            "seedVestingPeriod": {
                "description": "Returns the vesting period for seed.",
                "fields": {}
            },
            "passedCliff": {
                "description": "Checks if the cliff period has passed.",
                "fields": {}
            },
            "passedAllVestingPeriods": {
                "description": "Checks if all vesting periods have passed.",
                "fields": {}
            }
        }
    },
    "0xC669928185DbCE49d2230CC9B0979BE6DC797957": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to the specified recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one account to another on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given name and symbol.",
                "fields": {
                    "name_": "_name",
                    "symbol_": "_symbol"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role identifier.",
                "fields": {}
            },
            "ERC712_VERSION": {
                "description": "Returns the ERC712 version.",
                "fields": {}
            },
            "PREDICATE_ROLE": {
                "description": "Returns the predicate role identifier.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of the specified account.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "executeMetaTransaction": {
                "description": "Executes a meta transaction on behalf of a user.",
                "fields": {
                    "userAddress": "_userAddress",
                    "functionSignature": "_functionSignature",
                    "sigR": "_sigR",
                    "sigS": "_sigS",
                    "sigV": "_sigV"
                }
            },
            "getChainId": {
                "description": "Returns the chain ID of the blockchain.",
                "fields": {}
            },
            "getDomainSeperator": {
                "description": "Returns the domain separator used in EIP712.",
                "fields": {}
            },
            "getNonce": {
                "description": "Returns the nonce for the specified user address.",
                "fields": {
                    "user": "_user"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role of a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getRoleMember": {
                "description": "Returns the address of a specific role member at a given index.",
                "fields": {
                    "role": "_role",
                    "index": "_index"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members in a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "grantRole": {
                "description": "Grants a specific role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "mint": {
                "description": "Mints new tokens and assigns them to the specified user.",
                "fields": {
                    "user": "_user",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "renounceRole": {
                "description": "Renounces a specific role for the caller.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a specific role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to the specified address.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another, on behalf of the token owner.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to withdraw a certain amount from the caller's account.",
                "fields": {
                    "_spender": "_spender",
                    "_amount": "_amount"
                }
            },
            "approveAndCall": {
                "description": "Approves a spender and calls a function on the spender.",
                "fields": {
                    "_spender": "_spender",
                    "_amount": "_amount",
                    "_extraData": "_extraData"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "creationBlock": {
                "description": "Returns the block number when the token was created.",
                "fields": {}
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            },
            "transfersEnabled": {
                "description": "Returns whether transfers are enabled.",
                "fields": {}
            },
            "changeController": {
                "description": "Changes the controller of the token.",
                "fields": {
                    "_newController": "_newController"
                }
            },
            "enableTransfers": {
                "description": "Enables or disables transfers.",
                "fields": {
                    "_transfersEnabled": "_transfersEnabled"
                }
            },
            "createCloneToken": {
                "description": "Creates a clone token with specified parameters.",
                "fields": {
                    "_cloneTokenName": "_cloneTokenName",
                    "_cloneDecimalUnits": "_cloneDecimalUnits",
                    "_cloneTokenSymbol": "_cloneTokenSymbol",
                    "_snapshotBlock": "_snapshotBlock",
                    "_transfersEnabled": "_transfersEnabled"
                }
            },
            "generateTokens": {
                "description": "Generates new tokens for a specified address.",
                "fields": {
                    "_owner": "_owner",
                    "_amount": "_amount"
                }
            },
            "destroyTokens": {
                "description": "Destroys tokens from a specified address.",
                "fields": {
                    "_owner": "_owner",
                    "_amount": "_amount"
                }
            },
            "claimTokens": {
                "description": "Claims tokens from the specified token contract.",
                "fields": {
                    "_token": "_token"
                }
            },
            "parentToken": {
                "description": "Returns the address of the parent token.",
                "fields": {}
            },
            "parentSnapShotBlock": {
                "description": "Returns the block number of the parent snapshot.",
                "fields": {}
            },
            "balanceOfAt": {
                "description": "Returns the balance of a specific address at a specific block number.",
                "fields": {
                    "_owner": "_owner",
                    "_blockNumber": "_blockNumber"
                }
            },
            "totalSupplyAt": {
                "description": "Returns the total supply at a specific block number.",
                "fields": {
                    "_blockNumber": "_blockNumber"
                }
            },
            "tokenFactory": {
                "description": "Returns the address of the token factory.",
                "fields": {}
            },
            "controller": {
                "description": "Returns the address of the current controller.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "_tokenFactory": "_tokenFactory",
                    "_parentToken": "_parentToken",
                    "_parentSnapShotBlock": "_parentSnapShotBlock",
                    "_tokenName": "_tokenName",
                    "_decimalUnits": "_decimalUnits",
                    "_tokenSymbol": "_tokenSymbol",
                    "_transfersEnabled": "_transfersEnabled"
                }
            },
            "ClaimedTokens": {
                "description": "Emitted when tokens are claimed.",
                "fields": {
                    "_token": "_token",
                    "_controller": "_controller",
                    "_amount": "_amount"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "NewCloneToken": {
                "description": "Emitted when a new clone token is created.",
                "fields": {
                    "_cloneToken": "_cloneToken",
                    "_snapshotBlock": "_snapshotBlock"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender",
                    "_amount": "_amount"
                }
            }
        }
    },
    "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110": {
        "functions": {
            "transfer_functions": {
                "upgradeTo": {
                    "description": "Upgrades the contract to a new implementation.",
                    "fields": {
                        "newImplementation": "_newImplementation"
                    }
                },
                "upgradeToAndCall": {
                    "description": "Upgrades the contract to a new implementation and executes a function call.",
                    "fields": {
                        "newImplementation": "_newImplementation",
                        "data": "_data"
                    }
                }
            },
            "other_functions": {
                "implementation": {
                    "description": "Returns the current implementation address.",
                    "fields": {}
                },
                "changeAdmin": {
                    "description": "Changes the admin of the contract.",
                    "fields": {
                        "newAdmin": "_newAdmin"
                    }
                },
                "admin": {
                    "description": "Returns the current admin address.",
                    "fields": {}
                },
                "constructor": {
                    "description": "Initializes the contract with the given implementation address.",
                    "fields": {
                        "_logic": "_logic",
                        "admin_": "_admin",
                        "_data": "_data"
                    }
                },
                "fallback": {
                    "description": "Fallback function to receive Ether.",
                    "fields": {}
                }
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x5c147e74D63B1D31AA3Fd78Eb229B65161983B2b": {
        "constructor": {
            "parameters": {
                "contractLogic": "contractLogic"
            },
            "description": "Constructor function that initializes the contract with the given logic address."
        },
        "fallback": {
            "parameters": {},
            "description": "Fallback function to handle any calls to the contract that do not match existing functions."
        }
    },
    "0x35fA164735182de50811E8e2E824cFb9B6118ac2":{
        "transfer_functions": {
            "upgradeTo": {
              "description": "Upgrades the contract to a new implementation.",
              "fields": {
                "newImplementation": "_newImplementation"
              }
            },
            "upgradeToAndCall": {
              "description": "Upgrades the contract to a new implementation and executes a function call.",
              "fields": {
                "newImplementation": "_newImplementation",
                "data": "_data"
              }
            }
          },
          "other_functions": {
            "implementation": {
              "description": "Returns the current implementation address.",
              "fields": {}
            },
            "changeAdmin": {
              "description": "Changes the admin of the contract.",
              "fields": {
                "newAdmin": "_newAdmin"
              }
            },
            "admin": {
              "description": "Returns the current admin address.",
              "fields": {}
            },
            "constructor": {
              "description": "Initializes the contract with the given implementation address.",
              "fields": {
                "_implementation": "_implementation"
              }
            },
            "fallback": {
              "description": "Fallback function to receive Ether.",
              "fields": {}
            },
            "AdminChanged": {
              "description": "Emitted when the admin address changes.",
              "fields": {
                "previousAdmin": "_previousAdmin",
                "newAdmin": "_newAdmin"
              }
            },
            "BeaconUpgraded": {
              "description": "Emitted when the beacon address changes.",
              "fields": {
                "beacon": "_beacon"
              }
            },
            "Upgraded": {
              "description": "Emitted when the contract is upgraded to a new implementation.",
              "fields": {
                "implementation": "_implementation"
              }
            }
          }
    },
    "0x3593D125a4f7849a1B059E64F4517A86Dd60c95d": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` of tokens from the caller to `recipient`.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` of tokens from `sender` to `recipient`, using the allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Allows `spender` to withdraw from the caller's account multiple times, up to the `amount`.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance that `spender` has from the caller by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance that `spender` has from the caller by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given owner address.",
                "fields": {
                    "owner_": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "cap": {
                "description": "Returns the maximum number of tokens that can exist.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used in the token's representation.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `amount` of tokens to `account`.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total number of tokens in existence.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `newOwner`.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "Approval": {
                "description": "Emitted when `spender` is approved by `owner` to spend `value` tokens.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership is transferred from `previousOwner` to `newOwner`.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Transfer": {
                "description": "Emitted when `amount` of tokens are transferred from `from` to `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0xCa14007Eff0dB1f8135f4C25B34De49AB0d42766": {
        "transfer_functions": {
            "approve": {
                "description": "Sets the amount of tokens that an address can spend on behalf of the token owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "transfer": {
                "description": "Transfers tokens from the caller to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from a specified address to another address, using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that an address can spend on behalf of the token owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that an address can spend on behalf of the token owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            }
        },
        "other_functions": {
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role.",
                "fields": {}
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in EIP-712.",
                "fields": {}
            },
            "MINTER_ROLE": {
                "description": "Returns the minter role.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that an address is allowed to spend on behalf of the token owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoint details for a given address and position.",
                "fields": {
                    "account": "_account",
                    "pos": "_pos"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "delegate": {
                "description": "Delegates voting power to a specific address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power by signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "delegates": {
                "description": "Returns the delegatee of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPastTotalSupply": {
                "description": "Returns the total supply of tokens at a specific block number.",
                "fields": {
                    "blockNumber": "_blockNumber"
                }
            },
            "getPastVotes": {
                "description": "Returns the number of votes of an address at a specific block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role that manages a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getVotes": {
                "description": "Returns the number of votes of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "grantRole": {
                "description": "Grants a role to an address.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an address has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "mint": {
                "description": "Mints new tokens and assigns them to an address.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce of a specific address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "permit": {
                "description": "Allows spending tokens by signature.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "renounceRole": {
                "description": "Renounces a role for an address.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from an address.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x0C10bF8FcB7Bf5412187A595ab97a3609160b5c6": {
        "transfer_functions": {
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "address",
                    "spender": "address"
                }
            },
            "approve": {
                "description": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "address",
                    "amount": "uint256"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to `spender` by the caller.",
                "fields": {
                    "spender": "address",
                    "subtractedValue": "uint256"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to `spender` by the caller.",
                "fields": {
                    "spender": "address",
                    "addedValue": "uint256"
                }
            },
            "transfer": {
                "description": "Moves `amount` tokens from the caller's account to `recipient`.",
                "fields": {
                    "recipient": "address",
                    "amount": "uint256"
                }
            },
            "transferFrom": {
                "description": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism.",
                "fields": {
                    "sender": "address",
                    "recipient": "address",
                    "amount": "uint256"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "name_": "string",
                    "symbol_": "string",
                    "predicate_": "address"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role.",
                "fields": {}
            },
            "ERC712_VERSION": {
                "description": "Returns the version of ERC712 being used.",
                "fields": {}
            },
            "PREDICATE_ROLE": {
                "description": "Returns the predicate role.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the amount of tokens owned by `account`.",
                "fields": {
                    "account": "address"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used to get its user representation.",
                "fields": {}
            },
            "executeMetaTransaction": {
                "description": "Executes a meta transaction on behalf of `userAddress`.",
                "fields": {
                    "userAddress": "address",
                    "functionSignature": "bytes",
                    "sigR": "bytes32",
                    "sigS": "bytes32",
                    "sigV": "uint8"
                }
            },
            "getChainId": {
                "description": "Returns the current chain ID.",
                "fields": {}
            },
            "getDomainSeperator": {
                "description": "Returns the domain separator.",
                "fields": {}
            },
            "getNonce": {
                "description": "Returns the nonce for `user`.",
                "fields": {
                    "user": "address"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role that controls `role`.",
                "fields": {
                    "role": "bytes32"
                }
            },
            "getRoleMember": {
                "description": "Returns the account at `index` for `role`.",
                "fields": {
                    "role": "bytes32",
                    "index": "uint256"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members in `role`.",
                "fields": {
                    "role": "bytes32"
                }
            },
            "grantRole": {
                "description": "Grants `role` to `account`.",
                "fields": {
                    "role": "bytes32",
                    "account": "address"
                }
            },
            "hasRole": {
                "description": "Returns `true` if `account` has been granted `role`.",
                "fields": {
                    "role": "bytes32",
                    "account": "address"
                }
            },
            "mint": {
                "description": "Mints `amount` tokens to `user`.",
                "fields": {
                    "user": "address",
                    "amount": "uint256"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "renounceRole": {
                "description": "Renounces `role` from the caller.",
                "fields": {
                    "role": "bytes32",
                    "account": "address"
                }
            },
            "revokeRole": {
                "description": "Revokes `role` from `account`.",
                "fields": {
                    "role": "bytes32",
                    "account": "address"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the amount of tokens in existence.",
                "fields": {}
            },
            "meta_events": {
                "Approval": {
                    "description": "Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`.",
                    "fields": {
                        "owner": "address",
                        "spender": "address",
                        "value": "uint256"
                    }
                },
                "MetaTransactionExecuted": {
                    "description": "Emitted when a meta transaction is executed.",
                    "fields": {
                        "userAddress": "address",
                        "relayerAddress": "address payable",
                        "functionSignature": "bytes"
                    }
                },
                "RoleAdminChanged": {
                    "description": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`.",
                    "fields": {
                        "role": "bytes32",
                        "previousAdminRole": "bytes32",
                        "newAdminRole": "bytes32"
                    }
                },
                "RoleGranted": {
                    "description": "Emitted when `account` is granted `role`.",
                    "fields": {
                        "role": "bytes32",
                        "account": "address",
                        "sender": "address"
                    }
                },
                "RoleRevoked": {
                    "description": "Emitted when `account` is revoked `role`.",
                    "fields": {
                        "role": "bytes32",
                        "account": "address",
                        "sender": "address"
                    }
                },
                "Transfer": {
                    "description": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`).",
                    "fields": {
                        "from": "address",
                        "to": "address",
                        "value": "uint256"
                    }
                }
            }
        }
    },
    "0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another, using an allowance mechanism.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "increaseAllowance": {
                "description": "Increases the spender's allowance for the owner's tokens.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the spender's allowance for the owner's tokens.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Approves a spender to transfer tokens on the owner's behalf.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to transfer on behalf of an owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred from one account to another.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when the allowance of a spender is set by the owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender",
                    "_value": "_value"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the mainchain gateway address.",
                "fields": {
                    "_mainchainGateway": "_mainchainGateway"
                }
            },
            "mainchainGateway": {
                "description": "Returns the address of the mainchain gateway.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "_address": "_address"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used in the token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            }
        }
    },
    "0x853d955aCEf822Db058eb8505911ED77F175b99e": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a recipient address.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from a sender to a recipient using an allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to use a specified amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a specified account using an allowance mechanism.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "poolBurnFrom": {
                "description": "Burns a specified amount of tokens from a pool's account.",
                "fields": {
                    "bAddress": "_b_address",
                    "bAmount": "_b_amount"
                }
            },
            "poolMint": {
                "description": "Mints a specified amount of tokens to a pool's account.",
                "fields": {
                    "mAddress": "_m_address",
                    "mAmount": "_m_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "_name": "_name",
                    "_symbol": "_symbol",
                    "_creator_address": "_creator_address",
                    "_timelock_address": "_timelock_address"
                }
            },
            "COLLATERAL_RATIO_PAUSER": {
                "description": "Returns the bytes32 identifier for the collateral ratio pauser role.",
                "fields": {}
            },
            "DEFAULT_ADMIN_ADDRESS": {
                "description": "Returns the address of the default admin.",
                "fields": {}
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the bytes32 identifier for the default admin role.",
                "fields": {}
            },
            "addPool": {
                "description": "Adds a pool address to the contract.",
                "fields": {
                    "poolAddress": "_pool_address"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of tokens held by a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "collateral_ratio_paused": {
                "description": "Returns whether the collateral ratio is currently paused.",
                "fields": {}
            },
            "controller_address": {
                "description": "Returns the address of the controller.",
                "fields": {}
            },
            "creator_address": {
                "description": "Returns the address of the creator.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "eth_usd_consumer_address": {
                "description": "Returns the address of the ETH/USD price consumer.",
                "fields": {}
            },
            "eth_usd_price": {
                "description": "Returns the current ETH/USD price.",
                "fields": {}
            },
            "frax_eth_oracle_address": {
                "description": "Returns the address of the FRAX/ETH price oracle.",
                "fields": {}
            },
            "frax_info": {
                "description": "Returns various FRAX-related information.",
                "fields": {}
            },
            "frax_pools": {
                "description": "Checks if an address is a registered FRAX pool.",
                "fields": {
                    "address": "_address"
                }
            },
            "frax_pools_array": {
                "description": "Returns an array of registered FRAX pool addresses.",
                "fields": {
                    "index": "_index"
                }
            },
            "frax_price": {
                "description": "Returns the current price of FRAX.",
                "fields": {}
            },
            "frax_step": {
                "description": "Returns the current step of FRAX.",
                "fields": {}
            },
            "fxs_address": {
                "description": "Returns the address of FXS.",
                "fields": {}
            },
            "fxs_eth_oracle_address": {
                "description": "Returns the address of the FXS/ETH price oracle.",
                "fields": {}
            },
            "fxs_price": {
                "description": "Returns the current price of FXS.",
                "fields": {}
            },
            "genesis_supply": {
                "description": "Returns the initial supply of the token.",
                "fields": {}
            },
            "getRoleAdmin": {
                "description": "Returns the admin role for a specified role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getRoleMember": {
                "description": "Returns the address of a member for a specified role at a given index.",
                "fields": {
                    "role": "_role",
                    "index": "_index"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members in a specified role.",
                "fields": {
                    "role": "_role"
                }
            },
            "globalCollateralValue": {
                "description": "Returns the total collateral value.",
                "fields": {}
            },
            "global_collateral_ratio": {
                "description": "Returns the global collateral ratio.",
                "fields": {}
            },
            "grantRole": {
                "description": "Grants a specified role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specified role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "setController": {
                "description": "Sets a new controller address.",
                "fields": {
                    "controllerAddress": "_controller_address"
                }
            },
            "setETHUSDOracle": {
                "description": "Sets a new ETH/USD price consumer address.",
                "fields": {
                    "ethUsdConsumerAddress": "_eth_usd_consumer_address"
                }
            },
            "setFRAXEthOracle": {
                "description": "Sets new FRAX/ETH price oracle and WETH address.",
                "fields": {
                    "fraxOracleAddr": "_frax_oracle_addr",
                    "wethAddress": "_weth_address"
                }
            },
            "setFXSAddress": {
                "description": "Sets a new FXS address.",
                "fields": {
                    "fxsAddress": "_fxs_address"
                }
            },
            "setFXSEthOracle": {
                "description": "Sets new FXS/ETH price oracle and WETH address.",
                "fields": {
                    "fxsOracleAddr": "_fxs_oracle_addr",
                    "wethAddress": "_weth_address"
                }
            },
            "setFraxStep": {
                "description": "Sets a new FRAX step value.",
                "fields": {
                    "newStep": "_new_step"
                }
            },
            "setMintingFee": {
                "description": "Sets a new minting fee.",
                "fields": {
                    "minFee": "_min_fee"
                }
            },
            "setOwner": {
                "description": "Sets a new owner address.",
                "fields": {
                    "ownerAddress": "_owner_address"
                }
            },
            "setPriceBand": {
                "description": "Sets a new price band.",
                "fields": {
                    "priceBand": "_price_band"
                }
            },
            "setPriceTarget": {
                "description": "Sets a new price target.",
                "fields": {
                    "newPriceTarget": "_new_price_target"
                }
            },
            "setRedemptionFee": {
                "description": "Sets a new redemption fee.",
                "fields": {
                    "redFee": "_red_fee"
                }
            },
            "setRefreshCooldown": {
                "description": "Sets a new refresh cooldown period.",
                "fields": {
                    "newCooldown": "_new_cooldown"
                }
            },
            "setTimelock": {
                "description": "Sets a new timelock address.",
                "fields": {
                    "newTimelock": "_new_timelock"
                }
            },
            "setTokenInfo": {
                "description": "Sets new token information.",
                "fields": {
                    "name": "_name",
                    "symbol": "_symbol"
                }
            },
            "setVesting": {
                "description": "Sets new vesting parameters.",
                "fields": {
                    "vesting": "_vesting"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specified interface.",
                "fields": {
                    "interfaceId": "_interface_id"
                }
            },
            "timelock_address": {
                "description": "Returns the address of the timelock.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x756bFb452cFE36A5Bc82e4F5f4261A89a18c242b": {
        "transfer_functions": {},
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given beacon address and optional initialization data.",
                "fields": {
                    "beacon": "beacon",
                    "data": "data"
                }
            },
            "fallback": {
                "description": "A fallback function that is called when no other function matches. Can receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "A receive function that is called when the contract receives Ether without any data.",
                "fields": {}
            }
        },
        "AdminChanged": {
            "description": "Emitted when the contract's admin changes.",
            "fields": {
                "previousAdmin": "previousAdmin",
                "newAdmin": "newAdmin"
            }
        },
        "BeaconUpgraded": {
            "description": "Emitted when the beacon is upgraded.",
            "fields": {
                "beacon": "beacon"
            }
        },
        "Upgraded": {
            "description": "Emitted when the contract's implementation is upgraded.",
            "fields": {
                "implementation": "implementation"
            }
        }
    },
    "0x62D0A8458eD7719FDAF978fe5929C6D342B0bFcE": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller's account to a recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from a specified address to a recipient on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "permit": {
                "description": "Permits a spender to spend tokens on behalf of the owner via a signed message.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "mint": {
                "description": "Mints a specified amount of new tokens to a recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "BURNER_ROLE": {
                "description": "Returns the bytes32 identifier for the burner role.",
                "fields": {}
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the bytes32 identifier for the default admin role.",
                "fields": {}
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in EIP-712 signatures.",
                "fields": {}
            },
            "MINTER_ROLE": {
                "description": "Returns the bytes32 identifier for the minter role.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of tokens held by a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoints for a specific account.",
                "fields": {
                    "account": "_account",
                    "pos": "_pos"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "delegates": {
                "description": "Returns the current delegate of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPastTotalSupply": {
                "description": "Returns the total supply of tokens at a specific block number.",
                "fields": {
                    "blockNumber": "_blockNumber"
                }
            },
            "getPastVotes": {
                "description": "Returns the number of votes for a specific account at a specific block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role for a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getRoleMember": {
                "description": "Returns a member of a specific role at a given index.",
                "fields": {
                    "role": "_role",
                    "index": "_index"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of members in a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "getVotes": {
                "description": "Returns the number of votes for a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "grantRole": {
                "description": "Grants a specific role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "renounceRole": {
                "description": "Renounces a specific role for the caller.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a specific role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract implements a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for a specific address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for a specific account.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegate": {
                "description": "Delegates voting power to a specified address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to a specified address via a signed message.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            }
        }
    },
    "0x68749665FF8D2d112Fa859AA293F07A622782F38": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "admin_": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x163f8C2467924be0ae7B5347228CABF260318753": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another, on behalf of the owner.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "existingHolders": "_existingHolders",
                    "existingAmounts": "_existingAmounts",
                    "name_": "_name_",
                    "symbol_": "_symbol_",
                    "inflationCapPeriod_": "_inflationCapPeriod_",
                    "inflationCapWad_": "_inflationCapWad_",
                    "inflationLockPeriod_": "_inflationLockPeriod_"
                }
            },
            "acceptOwnership": {
                "description": "Accepts ownership transfer.",
                "fields": {}
            },
            "setMinter": {
                "description": "Sets the address allowed to mint new tokens.",
                "fields": {
                    "minter_": "_minter_"
                }
            },
            "mintInflation": {
                "description": "Mints new tokens based on inflation parameters.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "mintOnce": {
                "description": "Mints new tokens for specified holders in one go.",
                "fields": {
                    "newHolders": "_newHolders",
                    "newAmounts": "_newAmounts"
                }
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "currentPeriodEnd": {
                "description": "Returns the end time of the current inflation period.",
                "fields": {}
            },
            "currentPeriodSupplyCap": {
                "description": "Returns the supply cap for the current period.",
                "fields": {}
            },
            "inflationCapPeriod": {
                "description": "Returns the period for inflation cap.",
                "fields": {}
            },
            "inflationCapWad": {
                "description": "Returns the inflation cap value.",
                "fields": {}
            },
            "inflationUnlockTime": {
                "description": "Returns the unlock time for inflation.",
                "fields": {}
            },
            "initialMintDone": {
                "description": "Returns whether the initial mint has been completed.",
                "fields": {}
            },
            "minter": {
                "description": "Returns the address allowed to mint new tokens.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the current owner.",
                "fields": {}
            },
            "pendingOwner": {
                "description": "Returns the address of the pending owner.",
                "fields": {}
            },
            "WAD_ONE": {
                "description": "Returns the constant WAD_ONE value.",
                "fields": {}
            },
            "INITIAL_SUPPLY_CAP": {
                "description": "Returns the initial supply cap value.",
                "fields": {}
            }
        }
    },
    "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function to accept Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x3845badAde8e6dFF049820680d1F14bD3903a5d0": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using an allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a specified amount of tokens.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "approveFor": {
                "description": "Approves a spender to spend a specified amount of tokens on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "transferAndChargeForGas": {
                "description": "Transfers tokens and charges for gas.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount",
                    "gasLimit": "_gasLimit",
                    "tokenGasPrice": "_tokenGasPrice",
                    "baseGasCharge": "_baseGasCharge",
                    "tokenReceiver": "_tokenReceiver"
                }
            },
            "approveAndExecuteWithSpecificGas": {
                "description": "Approves a spender and executes a transaction with specific gas.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount",
                    "gasLimit": "_gasLimit",
                    "data": "_data"
                }
            },
            "approveAndExecuteWithSpecificGasAndChargeForIt": {
                "description": "Approves a spender and executes a transaction with specific gas and charges for it.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount",
                    "gasLimit": "_gasLimit",
                    "tokenGasPrice": "_tokenGasPrice",
                    "baseGasCharge": "_baseGasCharge",
                    "tokenReceiver": "_tokenReceiver",
                    "data": "_data"
                }
            },
            "executeWithSpecificGas": {
                "description": "Executes a transaction with specific gas.",
                "fields": {
                    "to": "_to",
                    "gasLimit": "_gasLimit",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining allowance of a spender on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "isExecutionOperator": {
                "description": "Checks if an address is an execution operator.",
                "fields": {
                    "who": "_who"
                }
            },
            "isSuperOperator": {
                "description": "Checks if an address is a super operator.",
                "fields": {
                    "who": "_who"
                }
            },
            "getAdmin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "getExecutionAdmin": {
                "description": "Returns the current execution admin address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "changeExecutionAdmin": {
                "description": "Changes the execution admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "setSuperOperator": {
                "description": "Sets or unsets a super operator.",
                "fields": {
                    "superOperator": "_superOperator",
                    "enabled": "_enabled"
                }
            },
            "setExecutionOperator": {
                "description": "Sets or unsets an execution operator.",
                "fields": {
                    "executionOperator": "_executionOperator",
                    "enabled": "_enabled"
                }
            },
            "addAllowanceIfNeeded": {
                "description": "Adds an allowance if needed.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "amountNeeded": "_amountNeeded"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFor": {
                "description": "Burns a specified amount of tokens on behalf of an owner.",
                "fields": {
                    "owner": "_owner",
                    "amount": "_amount"
                }
            },
            "paidCall": {
                "description": "Executes a call with a specified amount of Ether.",
                "fields": {
                    "target": "_target",
                    "amount": "_amount",
                    "data": "_data"
                }
            },
            "approveAndCall": {
                "description": "Approves a spender and executes a call with a specified amount of Ether.",
                "fields": {
                    "target": "_target",
                    "amount": "_amount",
                    "data": "_data"
                }
            },
            "approveAndExecuteWithSpecificGasAndChargeForIt": {
                "description": "Approves a spender and executes a transaction with specific gas and charges for it.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount",
                    "gasLimit": "_gasLimit",
                    "tokenGasPrice": "_tokenGasPrice",
                    "baseGasCharge": "_baseGasCharge",
                    "tokenReceiver": "_tokenReceiver",
                    "data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "ExecutionAdminAdminChanged": {
                "description": "Emitted when the execution admin address changes.",
                "fields": {
                    "oldAdmin": "_oldAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "SuperOperator": {
                "description": "Emitted when a super operator is set or unset.",
                "fields": {
                    "superOperator": "_superOperator",
                    "enabled": "_enabled"
                }
            },
            "ExecutionOperator": {
                "description": "Emitted when an execution operator is set or unset.",
                "fields": {
                    "executionOperator": "_executionOperator",
                    "enabled": "_enabled"
                }
            }
        }
    },
    "0xc18360217d8f7ab5e7c516566761ea12ce7f9d72": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens from the caller to a recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, on behalf of the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with specified parameters.",
                "fields": {
                    "freeSupply": "_freeSupply",
                    "airdropSupply": "_airdropSupply",
                    "_claimPeriodEnds": "_claimPeriodEnds"
                }
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in the EIP712 signature scheme.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getVotes": {
                "description": "Returns the number of votes of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPastVotes": {
                "description": "Returns the number of votes of a specific address at a past block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "getPastTotalSupply": {
                "description": "Returns the total supply at a past block number.",
                "fields": {
                    "blockNumber": "_blockNumber"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoints of a specific address.",
                "fields": {
                    "account": "_account",
                    "pos": "_pos"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegates": {
                "description": "Returns the current delegate of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegate": {
                "description": "Delegates voting power to another address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power by signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "permit": {
                "description": "Sets allowances using the EIP2612 permit mechanism.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "claimPeriodEnds": {
                "description": "Returns the end of the claim period.",
                "fields": {}
            },
            "merkleRoot": {
                "description": "Returns the current Merkle root.",
                "fields": {}
            },
            "setMerkleRoot": {
                "description": "Sets a new Merkle root.",
                "fields": {
                    "_merkleRoot": "_merkleRoot"
                }
            },
            "isClaimed": {
                "description": "Checks if a specific claim has been made.",
                "fields": {
                    "index": "_index"
                }
            },
            "claimTokens": {
                "description": "Claims tokens using a Merkle proof.",
                "fields": {
                    "amount": "_amount",
                    "delegate": "_delegate",
                    "merkleProof": "_merkleProof"
                }
            },
            "mint": {
                "description": "Mints new tokens to a specified address.",
                "fields": {
                    "dest": "_dest",
                    "amount": "_amount"
                }
            },
            "mintCap": {
                "description": "Returns the minting cap.",
                "fields": {}
            },
            "nextMint": {
                "description": "Returns the next mint amount.",
                "fields": {}
            },
            "sweep": {
                "description": "Sweeps funds from the contract to a specified address.",
                "fields": {
                    "dest": "_dest"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce for a specific address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "minimumMintInterval": {
                "description": "Returns the minimum interval between mints.",
                "fields": {}
            }
        }
    },
    "0xB62132e35a6c13ee1EE0f84dC5d40bad8d815206": {
        "transfer": {
            "transfer": {
                "description": "Transfers tokens from the caller to another address.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from a specified address to another address using the allowance mechanism.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender can spend on behalf of the caller.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance granted to a spender.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance granted to a spender.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "transferERC20Token": {
                "description": "Transfers an ERC20 token from this contract to another address.",
                "fields": {
                    "_token": "_token",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "withdrawAdvisersTokens": {
                "description": "Withdraws tokens allocated to advisers.",
                "fields": {
                    "_to": "_to",
                    "_amountWithDecimals": "_amountWithDecimals"
                }
            },
            "withdrawTeamTokens": {
                "description": "Withdraws tokens allocated to the team.",
                "fields": {
                    "_to": "_to",
                    "_amountWithDecimals": "_amountWithDecimals"
                }
            },
            "withdrawOverdraftTokens": {
                "description": "Withdraws overdraft tokens.",
                "fields": {
                    "_to": "_to",
                    "_amountWithDecimals": "_amountWithDecimals"
                }
            },
            "withdrawCommunityTokens": {
                "description": "Withdraws community tokens.",
                "fields": {
                    "_to": "_to",
                    "_amountWithDecimals": "_amountWithDecimals"
                }
            },
            "distributeInvestorsTokens": {
                "description": "Distributes tokens to investors.",
                "fields": {
                    "_to": "_to",
                    "_amountWithDecimals": "_amountWithDecimals"
                }
            }
        },
        "other_functions": {
            "setOwner": {
                "description": "Sets a new owner for the contract.",
                "fields": {
                    "_new": "_new"
                }
            },
            "confirmOwnership": {
                "description": "Confirms the transfer of ownership.",
                "fields": {}
            },
            "transfer": {
                "description": "Transfers tokens from the caller to another address.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of a specified address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "creationTime": {
                "description": "Returns the creation time of the contract.",
                "fields": {}
            },
            "overdraftAllocation": {
                "description": "Returns the address allocated for overdraft.",
                "fields": {}
            },
            "investorsAllocation": {
                "description": "Returns the address allocated for investors.",
                "fields": {}
            },
            "advisersAllocation": {
                "description": "Returns the address allocated for advisers.",
                "fields": {}
            },
            "teamAllocation": {
                "description": "Returns the address allocated for the team.",
                "fields": {}
            },
            "communityAllocation": {
                "description": "Returns the address allocated for the community.",
                "fields": {}
            },
            "teamTotal": {
                "description": "Returns the total tokens allocated to the team.",
                "fields": {}
            },
            "investorsTotal": {
                "description": "Returns the total tokens allocated to investors.",
                "fields": {}
            },
            "advisersTotal": {
                "description": "Returns the total tokens allocated to advisers.",
                "fields": {}
            },
            "communityTotal": {
                "description": "Returns the total tokens allocated to the community.",
                "fields": {}
            },
            "teamCliff": {
                "description": "Returns the cliff period for team tokens.",
                "fields": {}
            },
            "advisersCliff": {
                "description": "Returns the cliff period for adviser tokens.",
                "fields": {}
            },
            "overdraftCliff": {
                "description": "Returns the cliff period for overdraft tokens.",
                "fields": {}
            },
            "communityCliff": {
                "description": "Returns the cliff period for community tokens.",
                "fields": {}
            },
            "teamPeriodLength": {
                "description": "Returns the period length for team tokens.",
                "fields": {}
            },
            "advisersPeriodLength": {
                "description": "Returns the period length for adviser tokens.",
                "fields": {}
            },
            "overdraftPeriodLength": {
                "description": "Returns the period length for overdraft tokens.",
                "fields": {}
            },
            "communityPeriodLength": {
                "description": "Returns the period length for community tokens.",
                "fields": {}
            },
            "teamPeriodsNumber": {
                "description": "Returns the number of periods for team tokens.",
                "fields": {}
            },
            "advisersPeriodsNumber": {
                "description": "Returns the number of periods for adviser tokens.",
                "fields": {}
            },
            "overdraftPeriodsNumber": {
                "description": "Returns the number of periods for overdraft tokens.",
                "fields": {}
            },
            "communityPeriodsNumber": {
                "description": "Returns the number of periods for community tokens.",
                "fields": {}
            },
            "teamPeriodAmount": {
                "description": "Returns the amount of tokens vested per period for the team.",
                "fields": {}
            },
            "advisersPeriodAmount": {
                "description": "Returns the amount of tokens vested per period for advisers.",
                "fields": {}
            },
            "overdraftPeriodAmount": {
                "description": "Returns the amount of tokens vested per period for overdraft.",
                "fields": {}
            },
            "communityPeriodAmount": {
                "description": "Returns the amount of tokens vested per period for the community.",
                "fields": {}
            },
            "teamUnvested": {
                "description": "Returns the amount of unvested tokens allocated to the team.",
                "fields": {}
            },
            "advisersUnvested": {
                "description": "Returns the amount of unvested tokens allocated to advisers.",
                "fields": {}
            },
            "overdraftUnvested": {
                "description": "Returns the amount of unvested overdraft tokens.",
                "fields": {}
            },
            "communityUnvested": {
                "description": "Returns the amount of unvested community tokens.",
                "fields": {}
            }
        }
    },
    "0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91": {
        "transfer_functions": {},
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with a logic address and initialization data.",
                "fields": {
                    "logic": "_logic",
                    "data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function that allows the contract to receive Ether.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function that allows the contract to receive Ether.",
                "fields": {}
            }
        },
        "AdminChanged": {
            "description": "Emitted when the admin of the contract is changed.",
            "fields": {
                "previousAdmin": "_previousAdmin",
                "newAdmin": "_newAdmin"
            }
        },
        "BeaconUpgraded": {
            "description": "Emitted when the beacon address is upgraded.",
            "fields": {
                "beacon": "_beacon"
            }
        },
        "Upgraded": {
            "description": "Emitted when the implementation address is upgraded.",
            "fields": {
                "implementation": "_implementation"
            }
        }
    },
    "0x4d224452801ACEd8B2F0aebE155379bb5D594381": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to `recipient`.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `sender` to `recipient` using the allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given name, symbol, and total supply.",
                "fields": {
                    "name": "_name",
                    "symbol": "_symbol",
                    "totalSupply_": "_totalSupply_"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "Transfer": {
                "description": "Emitted when `amount` tokens are transferred from `from` to `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0x0000000000085d4780B73119b644AE5ecd22b376": {
        "transfer_functions": {
            "transferProxyOwnership": {
                "description": "Transfers ownership of the proxy to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "claimProxyOwnership": {
                "description": "Claims the ownership of the proxy after it has been transferred.",
                "fields": {}
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "proxyOwner": {
                "description": "Returns the current owner of the proxy.",
                "fields": {}
            },
            "pendingProxyOwner": {
                "description": "Returns the address of the pending new owner of the proxy.",
                "fields": {}
            },
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "constructor": {
                "description": "Initializes the contract.",
                "fields": {}
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "ProxyOwnershipTransferred": {
                "description": "Emitted when the ownership of the proxy is transferred.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "NewPendingOwner": {
                "description": "Emitted when a new pending owner is set for the proxy.",
                "fields": {
                    "currentOwner": "_currentOwner",
                    "pendingOwner": "_pendingOwner"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x0F5D2fB29fb7d3CFeE444a200298f468908cC942": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `_value` amount of tokens to address `_to`.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `_value` amount of tokens from address `_from` to address `_to`.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Approves `_spender` to spend `_value` amount of tokens on behalf of the sender.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that `_spender` is allowed to spend on behalf of `_owner`.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            }
        },
        "other_functions": {
            "mintingFinished": {
                "description": "Returns whether minting is finished.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places for the token.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `_amount` new tokens to address `_to`.",
                "fields": {
                    "_to": "_to",
                    "_amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns `_value` amount of tokens from the sender's account.",
                "fields": {
                    "_value": "_value"
                }
            },
            "paused": {
                "description": "Returns whether the contract is paused.",
                "fields": {}
            },
            "finishMinting": {
                "description": "Finishes the minting process.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses the contract.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            }
        }
    },
    "0xFd09Cf7cFffa9932e33668311C4777Cb9db3c9Be": {
        "transfer_functions": {
            "ProxyDeposit": {
                "description": "Emitted when Ether is deposited into the proxy.",
                "fields": {
                    "sender": "_sender",
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "proxyType": {
                "description": "Returns the type of proxy.",
                "fields": {}
            },
            "isDepositable": {
                "description": "Checks if deposits are allowed in this contract.",
                "fields": {}
            },
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "appId": {
                "description": "Returns the application ID.",
                "fields": {}
            },
            "kernel": {
                "description": "Returns the address of the kernel.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given kernel, app ID, and initialization payload.",
                "fields": {
                    "_kernel": "_kernel",
                    "_appId": "_appId",
                    "_initializePayload": "_initializePayload"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        }
    },
    "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704": {
        "transfer": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x45804880De22913dAFE09f4980848ECE6EcbAf78": {
        "transfer": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "_implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0x3506424F91fD33084466F402d5D97f05F8e3b4AF": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `value` amount of tokens to address `to`.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `value` amount of tokens from address `from` to address `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Allows `spender` to spend `value` amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of `owner`.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "paused": {
                "description": "Returns whether the contract is paused.",
                "fields": {}
            },
            "isPauser": {
                "description": "Returns whether the `account` is a pauser.",
                "fields": {
                    "account": "_account"
                }
            },
            "addPauser": {
                "description": "Adds `account` as a pauser.",
                "fields": {
                    "account": "_account"
                }
            },
            "renouncePauser": {
                "description": "Renounces the pauser role for the caller.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses the contract.",
                "fields": {}
            }
        }
    },
    "0x198d14F2Ad9CE69E76ea330B374DE4957C3F850a": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to a recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using an allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "mint": {
                "description": "Mints new tokens to a specified address.",
                "fields": {
                    "user": "_user",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender can spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Allows the spender to withdraw a set amount of tokens from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender by the owner.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender by the owner.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "grantRole": {
                "description": "Grants a specific role to an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a specific role from an account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "getRoleMember": {
                "description": "Returns the account at a specific index for a role.",
                "fields": {
                    "role": "_role",
                    "index": "_index"
                }
            },
            "getRoleMemberCount": {
                "description": "Returns the number of accounts that have a specific role.",
                "fields": {
                    "role": "_role"
                }
            },
            "renounceRole": {
                "description": "Renounces a role from the calling account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "getNonce": {
                "description": "Returns the current nonce for a user, useful for meta-transactions.",
                "fields": {
                    "user": "_user"
                }
            },
            "executeMetaTransaction": {
                "description": "Executes a meta-transaction.",
                "fields": {
                    "userAddress": "_userAddress",
                    "functionSignature": "_functionSignature",
                    "sigR": "_sigR",
                    "sigS": "_sigS",
                    "sigV": "_sigV"
                }
            },
            "getDomainSeperator": {
                "description": "Returns the domain separator used in the encoding of the signature for meta-transactions.",
                "fields": {}
            },
            "getChainId": {
                "description": "Returns the chain ID of the contract's blockchain.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total token supply.",
                "fields": {}
            }
        }
    },
    "0x808507121B80c02388fAd14726482e061B8da827": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to `dst`.",
                "fields": {
                    "dst": "_dst",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `src` to `dst` using the allowance mechanism.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "_governance": "_governance",
                    "pendleTeamTokens": "_pendleTeamTokens",
                    "pendleEcosystemFund": "_pendleEcosystemFund",
                    "salesMultisig": "_salesMultisig",
                    "_liquidityIncentivesRecipient": "_liquidityIncentivesRecipient"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that `spender` is allowed to spend on behalf of `account`.",
                "fields": {
                    "account": "_account",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns `amount` tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "claimGovernance": {
                "description": "Claims the governance role.",
                "fields": {}
            },
            "claimLiquidityEmissions": {
                "description": "Claims liquidity emissions and returns the total amount of emissions.",
                "fields": {}
            },
            "applyConfigChanges": {
                "description": "Applies the pending configuration changes.",
                "fields": {}
            },
            "initiateConfigChanges": {
                "description": "Initiates changes to the configuration parameters.",
                "fields": {
                    "_emissionRateMultiplierNumerator": "_emissionRateMultiplierNumerator",
                    "_terminalInflationRateNumerator": "_terminalInflationRateNumerator",
                    "_liquidityIncentivesRecipient": "_liquidityIncentivesRecipient",
                    "_isBurningAllowed": "_isBurningAllowed"
                }
            },
            "withdrawEther": {
                "description": "Withdraws `amount` of Ether to the specified address.",
                "fields": {
                    "amount": "_amount",
                    "sendTo": "_sendTo"
                }
            },
            "withdrawToken": {
                "description": "Withdraws `amount` of tokens from the contract to the specified address.",
                "fields": {
                    "token": "_token",
                    "amount": "_amount",
                    "sendTo": "_sendTo"
                }
            },
            "delegate": {
                "description": "Delegates voting power to `delegatee`.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to `delegatee` using a signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "getCurrentVotes": {
                "description": "Returns the current voting power of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPriorVotes": {
                "description": "Returns the voting power of `account` at the specified block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "transferGovernance": {
                "description": "Transfers governance to a new address.",
                "fields": {
                    "_governance": "_governance"
                }
            },
            "configChangesInitiated": {
                "description": "Returns the timestamp of the initiated configuration changes.",
                "fields": {}
            },
            "isBurningAllowed": {
                "description": "Returns whether burning is allowed.",
                "fields": {}
            },
            "isPendleToken": {
                "description": "Returns whether the token is a Pendle token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "startTime": {
                "description": "Returns the start time of the contract.",
                "fields": {}
            },
            "domainTypehash": {
                "description": "Returns the domain typehash.",
                "fields": {}
            },
            "delegationTypehash": {
                "description": "Returns the delegation typehash.",
                "fields": {}
            }
        }
    },
    "0xd0dA9cBeA9C3852C5d63A95F9ABCC4f6eA0F9032": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers value to the specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers value from one address to another using allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Approves a spender to transfer a specified value on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "burnSecondary": {
                "description": "Burns secondary tokens for a specified amount.",
                "fields": {
                    "address": "_address",
                    "value": "_value"
                }
            },
            "burnSynths": {
                "description": "Burns a specified amount of synths.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnSynthsOnBehalf": {
                "description": "Burns synths on behalf of another address.",
                "fields": {
                    "burnForAddress": "_burnForAddress",
                    "amount": "_amount"
                }
            },
            "burnSynthsToTarget": {
                "description": "Burns synths to reach a target amount.",
                "fields": {}
            },
            "burnSynthsToTargetOnBehalf": {
                "description": "Burns synths to target amount on behalf of another address.",
                "fields": {
                    "burnForAddress": "_burnForAddress"
                }
            },
            "mint": {
                "description": "Mints new tokens.",
                "fields": {}
            },
            "emitAtomicSynthExchange": {
                "description": "Emits an event for an atomic synth exchange.",
                "fields": {
                    "account": "_account",
                    "fromCurrencyKey": "_fromCurrencyKey",
                    "fromAmount": "_fromAmount",
                    "toCurrencyKey": "_toCurrencyKey",
                    "toAmount": "_toAmount",
                    "toAddress": "_toAddress"
                }
            },
            "emitExchangeRebate": {
                "description": "Emits an event for an exchange rebate.",
                "fields": {
                    "account": "_account",
                    "currencyKey": "_currencyKey",
                    "amount": "_amount"
                }
            },
            "emitExchangeReclaim": {
                "description": "Emits an event for an exchange reclaim.",
                "fields": {
                    "account": "_account",
                    "currencyKey": "_currencyKey",
                    "amount": "_amount"
                }
            },
            "emitExchangeTracking": {
                "description": "Emits an event for exchange tracking.",
                "fields": {
                    "trackingCode": "_trackingCode",
                    "toCurrencyKey": "_toCurrencyKey",
                    "toAmount": "_toAmount",
                    "fee": "_fee"
                }
            },
            "emitSynthExchange": {
                "description": "Emits an event for a synth exchange.",
                "fields": {
                    "account": "_account",
                    "fromCurrencyKey": "_fromCurrencyKey",
                    "fromAmount": "_fromAmount",
                    "toCurrencyKey": "_toCurrencyKey",
                    "toAmount": "_toAmount",
                    "toAddress": "_toAddress"
                }
            },
            "exchange": {
                "description": "Exchanges a specified amount from one currency to another.",
                "fields": {
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey"
                }
            },
            "exchangeAtomically": {
                "description": "Exchanges a specified amount from one currency to another atomically.",
                "fields": {
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey",
                    "trackingCode": "_trackingCode",
                    "minAmount": "_minAmount"
                }
            },
            "exchangeOnBehalf": {
                "description": "Exchanges a specified amount from one currency to another on behalf of another address.",
                "fields": {
                    "exchangeForAddress": "_exchangeForAddress",
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey"
                }
            },
            "exchangeOnBehalfWithTracking": {
                "description": "Exchanges a specified amount from one currency to another on behalf of another address with tracking.",
                "fields": {
                    "exchangeForAddress": "_exchangeForAddress",
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey",
                    "rewardAddress": "_rewardAddress",
                    "trackingCode": "_trackingCode"
                }
            },
            "exchangeWithTracking": {
                "description": "Exchanges a specified amount from one currency to another with tracking.",
                "fields": {
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey",
                    "rewardAddress": "_rewardAddress",
                    "trackingCode": "_trackingCode"
                }
            },
            "exchangeWithTrackingForInitiator": {
                "description": "Exchanges a specified amount from one currency to another with tracking for the initiator.",
                "fields": {
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey",
                    "rewardAddress": "_rewardAddress",
                    "trackingCode": "_trackingCode"
                }
            },
            "exchangeWithVirtual": {
                "description": "Exchanges a specified amount from one currency to another with virtual synth.",
                "fields": {
                    "sourceCurrencyKey": "_sourceCurrencyKey",
                    "sourceAmount": "_sourceAmount",
                    "destinationCurrencyKey": "_destinationCurrencyKey",
                    "trackingCode": "_trackingCode"
                }
            },
            "mintSecondary": {
                "description": "Mints secondary tokens for a specified address.",
                "fields": {
                    "address": "_address",
                    "value": "_value"
                }
            },
            "mintSecondaryRewards": {
                "description": "Mints secondary rewards based on the specified amount.",
                "fields": {
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "CONTRACT_NAME": {
                "description": "Returns the contract name.",
                "fields": {}
            },
            "DECIMALS": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "TOKEN_NAME": {
                "description": "Returns the token name.",
                "fields": {}
            },
            "TOKEN_SYMBOL": {
                "description": "Returns the token symbol.",
                "fields": {}
            },
            "acceptOwnership": {
                "description": "Accepts ownership of the contract.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the allowance a spender has for a specific owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "anySynthOrSNXRateIsInvalid": {
                "description": "Checks if any synth or SNX rate is invalid.",
                "fields": {}
            },
            "availableCurrencyKeys": {
                "description": "Returns the available currency keys.",
                "fields": {}
            },
            "availableSynthCount": {
                "description": "Returns the count of available synths.",
                "fields": {}
            },
            "availableSynths": {
                "description": "Returns available synths at a specified index.",
                "fields": {
                    "index": "_index"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "collateral": {
                "description": "Returns the collateral amount for a specific address.",
                "fields": {
                    "account": "_account"
                }
            },
            "collateralisationRatio": {
                "description": "Returns the collateralisation ratio for a specific issuer.",
                "fields": {
                    "_issuer": "_issuer"
                }
            },
            "debtBalanceOf": {
                "description": "Returns the debt balance for a specific address and currency key.",
                "fields": {
                    "account": "_account",
                    "currencyKey": "_currencyKey"
                }
            },
            "decimals": {
                "description": "Returns the decimal places used by the token.",
                "fields": {}
            },
            "getFirstNonZeroEscrowIndex": {
                "description": "Returns the first non-zero escrow index for an account.",
                "fields": {
                    "account": "_account"
                }
            },
            "isResolverCached": {
                "description": "Checks if the resolver is cached.",
                "fields": {}
            },
            "isWaitingPeriod": {
                "description": "Checks if a currency is in a waiting period.",
                "fields": {
                    "currencyKey": "_currencyKey"
                }
            },
            "issueMaxSynths": {
                "description": "Issues the maximum amount of synths.",
                "fields": {}
            },
            "issueMaxSynthsOnBehalf": {
                "description": "Issues the maximum amount of synths on behalf of another address.",
                "fields": {
                    "issueForAddress": "_issueForAddress"
                }
            },
            "mintSecondary": {
                "description": "Mints secondary tokens for a specified address.",
                "fields": {
                    "address": "_address",
                    "value": "_value"
                }
            },
            "mintSecondaryRewards": {
                "description": "Mints secondary rewards for a specified amount.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nominateNewOwner": {
                "description": "Nominates a new owner for the contract.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "nominatedOwner": {
                "description": "Returns the nominated owner address.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner address.",
                "fields": {}
            },
            "proxy": {
                "description": "Returns the address of the proxy contract.",
                "fields": {}
            },
            "rebuildCache": {
                "description": "Rebuilds the cache.",
                "fields": {}
            },
            "remainingIssuableSynths": {
                "description": "Returns the remaining issuable synths for a specified account.",
                "fields": {
                    "account": "_account"
                }
            },
            "resolver": {
                "description": "Returns the address of the address resolver contract.",
                "fields": {}
            },
            "resolverAddressesRequired": {
                "description": "Returns the addresses required by the resolver.",
                "fields": {}
            },
            "revokeAllEscrow": {
                "description": "Revokes all escrow for a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "sUSD": {
                "description": "Returns the sUSD currency key.",
                "fields": {}
            },
            "setMessageSender": {
                "description": "Sets the message sender address.",
                "fields": {
                    "sender": "_sender"
                }
            },
            "setProxy": {
                "description": "Sets the address of the proxy contract.",
                "fields": {
                    "_proxy": "_proxy"
                }
            },
            "setTokenState": {
                "description": "Sets the token state contract address.",
                "fields": {
                    "_tokenState": "_tokenState"
                }
            },
            "settle": {
                "description": "Settles the specified currency.",
                "fields": {
                    "currencyKey": "_currencyKey"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "synths": {
                "description": "Returns the synth contract address for a specified currency key.",
                "fields": {
                    "currencyKey": "_currencyKey"
                }
            },
            "synthsByAddress": {
                "description": "Returns the currency key for a specified synth address.",
                "fields": {
                    "synthAddress": "_synthAddress"
                }
            },
            "tokenState": {
                "description": "Returns the token state contract address.",
                "fields": {}
            },
            "totalIssuedSynths": {
                "description": "Returns the total amount of issued synths.",
                "fields": {
                    "currencyKey": "_currencyKey"
                }
            },
            "totalIssuedSynthsExcludeOtherCollateral": {
                "description": "Returns the total issued synths excluding other collateral for a specified currency key.",
                "fields": {
                    "currencyKey": "_currencyKey"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            }
        }
    },
    "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F": {
        "transfer_functions": {
          "transfer": {
            "description": "Transfers `value` amount of tokens to `to` address.",
            "fields": {
              "to": "_to",
              "value": "_value"
            }
          },
          "transferFrom": {
            "description": "Transfers `value` amount of tokens from `from` address to `to` address.",
            "fields": {
              "from": "_from",
              "to": "_to",
              "value": "_value"
            }
          },
          "approve": {
            "description": "Sets `spender` as the spender of `value` amount of tokens from the caller's account.",
            "fields": {
              "spender": "_spender",
              "value": "_value"
            }
          },
          "allowance": {
            "description": "Returns the amount of tokens that `spender` is allowed to spend on behalf of `owner`.",
            "fields": {
              "owner": "_owner",
              "spender": "_spender"
            }
          }
        },
        "other_functions": {
          "name": {
            "description": "Returns the name of the token.",
            "fields": {}
          },
          "symbol": {
            "description": "Returns the symbol of the token.",
            "fields": {}
          },
          "decimals": {
            "description": "Returns the number of decimals used to get its user representation.",
            "fields": {}
          },
          "totalSupply": {
            "description": "Returns the total supply of the token.",
            "fields": {}
          },
          "balanceOf": {
            "description": "Returns the balance of `owner` address.",
            "fields": {
              "owner": "_owner"
            }
          },
          "nominatedOwner": {
            "description": "Returns the address nominated as the new owner.",
            "fields": {}
          },
          "owner": {
            "description": "Returns the current owner of the contract.",
            "fields": {}
          },
          "target": {
            "description": "Returns the current target address.",
            "fields": {}
          },
          "useDELEGATECALL": {
            "description": "Returns whether DELEGATECALL is used.",
            "fields": {}
          },
          "setTarget": {
            "description": "Sets a new target address.",
            "fields": {
              "target": "_target"
            }
          },
          "setUseDELEGATECALL": {
            "description": "Sets whether DELEGATECALL should be used.",
            "fields": {
              "value": "_value"
            }
          },
          "nominateNewOwner": {
            "description": "Nominates a new owner for the contract.",
            "fields": {
              "_owner": "_owner"
            }
          },
          "acceptOwnership": {
            "description": "Accepts the ownership of the contract.",
            "fields": {}
          },
          "constructor": {
            "description": "Initializes the contract with the given owner address.",
            "fields": {
              "_owner": "_owner"
            }
          },
          "fallback": {
            "description": "Fallback function to receive Ether.",
            "fields": {}
          },
          "_emit": {
            "description": "Emits an event with specified topics and data.",
            "fields": {
              "callData": "_callData",
              "numTopics": "_numTopics",
              "topic1": "_topic1",
              "topic2": "_topic2",
              "topic3": "_topic3",
              "topic4": "_topic4"
            }
          },
          "OwnerNominated": {
            "description": "Emitted when a new owner is nominated.",
            "fields": {
              "newOwner": "_newOwner"
            }
          },
          "OwnerChanged": {
            "description": "Emitted when ownership changes.",
            "fields": {
              "oldOwner": "_oldOwner",
              "newOwner": "_newOwner"
            }
          },
          "TargetUpdated": {
            "description": "Emitted when the target address is updated.",
            "fields": {
              "newTarget": "_newTarget"
            }
          },
          "Approval": {
            "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
            "fields": {
              "owner": "_owner",
              "spender": "_spender",
              "value": "_value"
            }
          },
          "Transfer": {
            "description": "Emitted when `value` tokens are transferred from `from` to `to` address.",
            "fields": {
              "from": "_from",
              "to": "_to",
              "value": "_value"
            }
          }
        }
      }
      ,
    "0xde4EE8057785A7e8e800Db58F9784845A5C2Cbd6": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to the given recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another using an allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferLock": {
                "description": "Transfers a specified amount of locked tokens to the given address.",
                "fields": {
                    "lockType": "_lockType",
                    "to": "_to",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given distributor address.",
                "fields": {
                    "_distributor": "_distributor"
                }
            },
            "approve": {
                "description": "Approves the spender to spend a specified amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a specified address using an allowance.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "getAllRounds": {
                "description": "Returns information about all rounds.",
                "fields": {}
            },
            "getAverageBalance": {
                "description": "Returns the average balance of a specified holder.",
                "fields": {
                    "_holder": "_holder"
                }
            },
            "getFullHolderInfo": {
                "description": "Returns detailed information about a specified holder.",
                "fields": {
                    "_holder": "_holder"
                }
            },
            "isRoundDepositsEnded": {
                "description": "Checks if the deposits for a specified round have ended.",
                "fields": {
                    "_round": "_round"
                }
            },
            "isRoundPrepared": {
                "description": "Checks if a specified round is prepared.",
                "fields": {
                    "_round": "_round"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "updateAndGetCurrentPrice": {
                "description": "Updates and returns the current price.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        }
    },
    "0x152649eA73beAb28c5b49B26eb48f7EAD6d4c898": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `value` amount of tokens from the caller's account to the `to` account.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `value` amount of tokens from `from` account to `to` account using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the `amount` of tokens that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the `amount` of tokens that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the `amount` of tokens that `spender` is allowed to spend on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_lzEndpoint": "_lzEndpoint"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "circulatingSupply": {
                "description": "Returns the total supply of the token currently in circulation.",
                "fields": {}
            },
            "feeOwner": {
                "description": "Returns the current fee owner address.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is paused or not.",
                "fields": {}
            },
            "precrime": {
                "description": "Returns the address of the precrime contract.",
                "fields": {}
            },
            "lzEndpoint": {
                "description": "Returns the address of the LayerZero endpoint.",
                "fields": {}
            },
            "getTrustedRemoteAddress": {
                "description": "Returns the trusted remote address for a specific chain.",
                "fields": {
                    "_remoteChainId": "_remoteChainId"
                }
            },
            "isTrustedRemote": {
                "description": "Returns whether the remote chain is trusted.",
                "fields": {
                    "_remoteChainId": "_remoteChainId"
                }
            },
            "quoteOFTFee": {
                "description": "Returns the fee amount for OFT.",
                "fields": {
                    "_amount": "_amount"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "retryMessage": {
                "description": "Retries a failed message.",
                "fields": {
                    "_srcChainId": "_srcChainId",
                    "_srcAddress": "_srcAddress",
                    "_nonce": "_nonce",
                    "_payload": "_payload"
                }
            },
            "sendAndCall": {
                "description": "Sends tokens and performs a callback.",
                "fields": {
                    "_from": "_from",
                    "_dstChainId": "_dstChainId",
                    "_toAddress": "_toAddress",
                    "_amount": "_amount",
                    "_minAmount": "_minAmount",
                    "_payload": "_payload",
                    "_dstGasForCall": "_dstGasForCall",
                    "_callParams": {
                        "refundAddress": "_refundAddress",
                        "zroPaymentAddress": "_zroPaymentAddress",
                        "adapterParams": "_adapterParams"
                    }
                }
            },
            "sendFrom": {
                "description": "Sends tokens from a specified address.",
                "fields": {
                    "_from": "_from",
                    "_dstChainId": "_dstChainId",
                    "_toAddress": "_toAddress",
                    "_amount": "_amount",
                    "_minAmount": "_minAmount",
                    "_callParams": {
                        "refundAddress": "_refundAddress",
                        "zroPaymentAddress": "_zroPaymentAddress",
                        "adapterParams": "_adapterParams"
                    }
                }
            },
            "setConfig": {
                "description": "Sets the configuration for a specific chain.",
                "fields": {
                    "_version": "_version",
                    "_chainId": "_chainId",
                    "_configType": "_configType",
                    "_config": "_config"
                }
            },
            "setDefaultFeeBp": {
                "description": "Sets the default fee basis points.",
                "fields": {
                    "_feeBp": "_feeBp"
                }
            },
            "setFeeBp": {
                "description": "Sets the fee basis points for a specific chain.",
                "fields": {
                    "_dstChainId": "_dstChainId",
                    "_enabled": "_enabled",
                    "_feeBp": "_feeBp"
                }
            },
            "setFeeOwner": {
                "description": "Sets the fee owner address.",
                "fields": {
                    "_feeOwner": "_feeOwner"
                }
            },
            "setInboundCap": {
                "description": "Sets the inbound cap for a specific chain.",
                "fields": {
                    "chainId": "_chainId",
                    "cap": "_cap"
                }
            },
            "setMinDstGas": {
                "description": "Sets the minimum destination gas for a specific chain and packet type.",
                "fields": {
                    "_dstChainId": "_dstChainId",
                    "_packetType": "_packetType",
                    "_minGas": "_minGas"
                }
            },
            "setOutboundCap": {
                "description": "Sets the outbound cap for a specific chain.",
                "fields": {
                    "chainId": "_chainId",
                    "cap": "_cap"
                }
            },
            "setPrecrime": {
                "description": "Sets the address of the precrime contract.",
                "fields": {
                    "_precrime": "_precrime"
                }
            },
            "setReceiveVersion": {
                "description": "Sets the receive version for the contract.",
                "fields": {
                    "_version": "_version"
                }
            },
            "setSendVersion": {
                "description": "Sets the send version for the contract.",
                "fields": {
                    "_version": "_version"
                }
            },
            "setTrustedRemote": {
                "description": "Sets the trusted remote address for a specific chain.",
                "fields": {
                    "_srcChainId": "_srcChainId",
                    "_path": "_path"
                }
            },
            "setTrustedRemoteAddress": {
                "description": "Sets the trusted remote address for a specific chain.",
                "fields": {
                    "_remoteChainId": "_remoteChainId",
                    "_remoteAddress": "_remoteAddress"
                }
            },
            "setUseCustomAdapterParams": {
                "description": "Sets whether to use custom adapter parameters.",
                "fields": {
                    "_useCustomAdapterParams": "_useCustomAdapterParams"
                }
            },
            "setWhitelist": {
                "description": "Sets the whitelist status for an address.",
                "fields": {
                    "addr": "_addr",
                    "isWhitelist": "_isWhitelist"
                }
            },
            "sharedDecimals": {
                "description": "Returns the shared decimals used in the contract.",
                "fields": {}
            },
            "supportsInterface": {
                "description": "Returns whether the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "token": {
                "description": "Returns the address of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "trustedRemoteLookup": {
                "description": "Returns the trusted remote address for a specific chain.",
                "fields": {
                    "chainId": "_chainId"
                }
            },
            "unpause": {
                "description": "Unpauses the contract.",
                "fields": {}
            },
            "useCustomAdapterParams": {
                "description": "Returns whether custom adapter parameters are used.",
                "fields": {}
            },
            "whitelist": {
                "description": "Returns the whitelist status for an address.",
                "fields": {
                    "addr": "_addr"
                }
            }
        }
    },
    "0x57e114B691Db790C35207b2e685D4A43181e6061": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another on behalf of the owner.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to spend a certain amount of tokens on behalf of the owner.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given initial owner, treasury, and foundation addresses.",
                "fields": {
                    "_initialOwner": "_initialOwner",
                    "_treasury": "_treasury",
                    "_foundation": "_foundation"
                }
            },
            "acceptOwnership": {
                "description": "Accepts the ownership transfer.",
                "fields": {}
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a specified address.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "eip712Domain": {
                "description": "Returns the EIP-712 domain separator and related information.",
                "fields": {}
            },
            "lastMintTimestamp": {
                "description": "Returns the timestamp of the last mint operation.",
                "fields": {}
            },
            "mint": {
                "description": "Mints a specified amount of tokens to a specified address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce for a specified address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "pendingOwner": {
                "description": "Returns the address of the pending owner.",
                "fields": {}
            },
            "permit": {
                "description": "Allows a spender to spend tokens on behalf of the owner using a signed permit.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            }
        }
    },
    "0x626E8036dEB333b408Be468F951bdB42433cBF18": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to `recipient`.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `sender` to `recipient` on behalf of the caller.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the allowance of `spender` to `amount` tokens.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns `amount` tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue` tokens.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue` tokens.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "mint": {
                "description": "Mints `amount` new tokens and assigns them to `account`.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `newOwner`.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership of the contract is transferred from `previousOwner` to `newOwner`.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Transfer": {
                "description": "Emitted when `amount` tokens are transferred from `from` to `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0x58b6A8A3302369DAEc383334672404Ee733aB239": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "_to": "_address",
                    "_value": "_uint256"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another on behalf of the token owner.",
                "fields": {
                    "_from": "_address",
                    "_to": "_address",
                    "_value": "_uint256"
                }
            },
            "approve": {
                "description": "Allows a spender to withdraw tokens from the owner's account multiple times, up to the specified amount.",
                "fields": {
                    "_spender": "_address",
                    "_value": "_uint256"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance granted to a spender by the owner.",
                "fields": {
                    "_spender": "_address",
                    "_addedValue": "_uint256"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance granted to a spender by the owner.",
                "fields": {
                    "_spender": "_address",
                    "_subtractedValue": "_uint256"
                }
            },
            "mint": {
                "description": "Mints new tokens and assigns them to a specified address.",
                "fields": {
                    "_to": "_address",
                    "_amount": "_uint256"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "_amount": "_uint256"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used for token amounts.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens held by a specific address.",
                "fields": {
                    "_owner": "_address"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to withdraw from an owner's account.",
                "fields": {
                    "_owner": "_address",
                    "_spender": "_address"
                }
            },
            "mintingFinished": {
                "description": "Returns whether minting is finished.",
                "fields": {}
            },
            "finishMinting": {
                "description": "Ends the minting process and makes the token non-mintable.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the contract owner.",
                "fields": {}
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_address"
                }
            }
        },
        "events": {
            "Transfer": {
                "description": "Emitted when tokens are transferred from one address to another.",
                "fields": {
                    "from": "_address",
                    "to": "_address",
                    "value": "_uint256"
                }
            },
            "Approval": {
                "description": "Emitted when the allowance of a spender for an owner is set or increased.",
                "fields": {
                    "owner": "_address",
                    "spender": "_address",
                    "value": "_uint256"
                }
            },
            "Mint": {
                "description": "Emitted when new tokens are minted.",
                "fields": {
                    "to": "_address",
                    "amount": "_uint256"
                }
            },
            "Burn": {
                "description": "Emitted when tokens are burned.",
                "fields": {
                    "burner": "_address",
                    "value": "_uint256"
                }
            },
            "MintFinished": {
                "description": "Emitted when minting is finished.",
                "fields": {}
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership of the contract is transferred to a new address.",
                "fields": {
                    "previousOwner": "_address",
                    "newOwner": "_address"
                }
            }
        }
    },
    "0x467719aD09025FcC6cF6F8311755809d45a5E5f3": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to `recipient`.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `sender` to `recipient` using the caller's allowance.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given name, symbol, decimals, and capacity.",
                "fields": {
                    "name": "_name",
                    "symbol": "_symbol",
                    "decimals": "_decimals",
                    "capacity": "_capacity"
                }
            },
            "cap": {
                "description": "Returns the maximum token supply.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used for the token.",
                "fields": {}
            },
            "domainSeparator": {
                "description": "Returns the domain separator used in EIP-712.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce of `address`.",
                "fields": {
                    "address": "_address"
                }
            },
            "depositAddress": {
                "description": "Returns the deposit address associated with a given `salt`.",
                "fields": {
                    "salt": "_salt"
                }
            },
            "mint": {
                "description": "Mints `amount` new tokens and assigns them to the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns tokens from the caller's account using the provided `salt`.",
                "fields": {
                    "salt": "_salt"
                }
            },
            "burnFrom": {
                "description": "Burns `amount` tokens from `account`'s balance.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "permit": {
                "description": "Sets allowance using a permit signature.",
                "fields": {
                    "issuer": "_issuer",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `newOwner`.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "Approval": {
                "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "Transfer": {
                "description": "Emitted when `amount` tokens are transferred from `from` to `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership of the contract is transferred from `previousOwner` to `newOwner`.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "CapExceeded": {
                "description": "Emitted when an operation exceeds the token cap.",
                "fields": {}
            },
            "InvalidAccount": {
                "description": "Emitted when an invalid account is used.",
                "fields": {}
            },
            "InvalidOwner": {
                "description": "Emitted when an invalid owner is referenced.",
                "fields": {}
            },
            "InvalidS": {
                "description": "Emitted when an invalid signature parameter `s` is encountered.",
                "fields": {}
            },
            "InvalidSignature": {
                "description": "Emitted when an invalid signature is provided.",
                "fields": {}
            },
            "InvalidV": {
                "description": "Emitted when an invalid signature parameter `v` is encountered.",
                "fields": {}
            },
            "NotOwner": {
                "description": "Emitted when an operation requires ownership but is performed by a non-owner.",
                "fields": {}
            },
            "PermitExpired": {
                "description": "Emitted when a permit has expired.",
                "fields": {}
            }
        }
    },
    "0x6810e776880C02933D47DB1b9fc05908e5386b96": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens to the specified address.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Approves the spender to spend a specified amount of tokens.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "dutchAuction": "_dutchAuction",
                    "owners": "_owners",
                    "tokens": "_tokens"
                }
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "Approval": {
                "description": "Emitted when approval is granted to spend tokens.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            }
        }
    },
    "0x6985884C4392D348587B19cb9eAAf157F13271cd": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers tokens from the caller to the specified address.",
                "fields": {
                    "to": "_to",
                    "value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one address to another using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            },
            "approve": {
                "description": "Sets the allowance for a spender to spend tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that a spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens held by a specific address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "constructor": {
                "description": "Initializes the contract with specified parameters.",
                "fields": {
                    "dutchAuction": "_dutchAuction",
                    "owners": "_owners",
                    "tokens": "_tokens"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "Transfer": {
                "description": "Emitted when a transfer of tokens occurs.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0x12e2b8033420270db2F3b328E32370Cb5B2Ca134": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another using allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when an approval is made by an owner to a spender.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "Transfer": {
                "description": "Emitted when a transfer of tokens occurs.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with default parameters.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to withdraw from an owner\u00e2\u20ac\u2122s account.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that a spender is allowed to withdraw from the caller\u00e2\u20ac\u2122s account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a given address.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to withdraw from the caller\u00e2\u20ac\u2122s account.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to withdraw from the caller\u00e2\u20ac\u2122s account.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            }
        }
    },
    "0xc00e94Cb662C3520282E6f5717214004A7f26888": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `rawAmount` of tokens from the caller's account to `dst`.",
                "fields": {
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            },
            "transferFrom": {
                "description": "Transfers `rawAmount` of tokens from `src` to `dst` on behalf of `src`.",
                "fields": {
                    "src": "_src",
                    "dst": "_dst",
                    "rawAmount": "_rawAmount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given account address.",
                "fields": {
                    "account": "_account"
                }
            },
            "approve": {
                "description": "Sets the allowance of `spender` to `rawAmount` tokens.",
                "fields": {
                    "spender": "_spender",
                    "rawAmount": "_rawAmount"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `account`.",
                "fields": {
                    "account": "_account",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "getCurrentVotes": {
                "description": "Returns the current number of votes held by `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPriorVotes": {
                "description": "Returns the number of votes held by `account` at a specific block number.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "delegates": {
                "description": "Returns the delegate address of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegate": {
                "description": "Delegates voting power to `delegatee`.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to `delegatee` using a signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoint information of `account` at a specific index.",
                "fields": {
                    "account": "_account",
                    "index": "_index"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "nonces": {
                "description": "Returns the current nonce for `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "DELEGATION_TYPEHASH": {
                "description": "Returns the type hash for delegation.",
                "fields": {}
            },
            "DOMAIN_TYPEHASH": {
                "description": "Returns the domain type hash.",
                "fields": {}
            }
        }
    },
    "0x11eeF04c884E24d9B7B4760e7476D06ddF797f36": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `_value` tokens to the address `_to`.",
                "fields": {
                    "_to": "Address of the recipient",
                    "_value": "Amount of tokens to transfer"
                }
            },
            "transferFrom": {
                "description": "Transfers `_value` tokens from the address `_from` to the address `_to`.",
                "fields": {
                    "_from": "Address of the sender",
                    "_to": "Address of the recipient",
                    "_value": "Amount of tokens to transfer"
                }
            },
            "approve": {
                "description": "Allows `_spender` to withdraw `_value` tokens from the sender's account.",
                "fields": {
                    "_spender": "Address of the spender",
                    "_value": "Amount of tokens to approve"
                }
            },
            "approveAndCall": {
                "description": "Allows `_spender` to withdraw `_value` tokens and executes a function call.",
                "fields": {
                    "_spender": "Address of the spender",
                    "_value": "Amount of tokens to approve",
                    "_extraData": "Additional data for the function call"
                }
            },
            "burn": {
                "description": "Burns `_value` tokens from the sender's account.",
                "fields": {
                    "_value": "Amount of tokens to burn"
                }
            },
            "burnFrom": {
                "description": "Burns `_value` tokens from the account of `_from`.",
                "fields": {
                    "_from": "Address of the account to burn tokens from",
                    "_value": "Amount of tokens to burn"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of the address `_address`.",
                "fields": {
                    "_address": "Address of the account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that `_spender` is allowed to withdraw from `_owner`.",
                "fields": {
                    "_owner": "Address of the token owner",
                    "_spender": "Address of the spender"
                }
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_implementation": "Address of the contract implementation"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            },
            "Transfer": {
                "description": "Emitted when tokens are transferred.",
                "fields": {
                    "from": "Address of the sender",
                    "to": "Address of the recipient",
                    "value": "Amount of tokens transferred"
                }
            },
            "Burn": {
                "description": "Emitted when tokens are burned.",
                "fields": {
                    "from": "Address of the account from which tokens were burned",
                    "value": "Amount of tokens burned"
                }
            }
        }
    },
    "0x26B80FBfC01b71495f477d5237071242e0d959d7": {
        "transfer_functions": {},
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with a beacon address and optional initialization data.",
                "fields": {
                    "beacon": "_beacon",
                    "data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to handle calls that do not match any function signature.",
                "fields": {}
            },
            "receive": {
                "description": "Receive function to handle incoming Ether transfers.",
                "fields": {}
            }
        }
    },
    "0xac3E018457B222d93114458476f3E3416Abbe38F": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another using allowance.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a specified amount of tokens for another address.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "permit": {
                "description": "Allows a specified address to spend a certain amount of tokens on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the underlying ERC20 token and the rewards cycle length.",
                "fields": {
                    "_underlying": "_underlying",
                    "_rewardsCycleLength": "_rewardsCycleLength"
                }
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in EIP-712.",
                "fields": {}
            },
            "asset": {
                "description": "Returns the address of the underlying ERC20 asset.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "convertToAssets": {
                "description": "Converts a specified amount of shares to assets.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "convertToShares": {
                "description": "Converts a specified amount of assets to shares.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "deposit": {
                "description": "Deposits a specified amount of assets and receives shares.",
                "fields": {
                    "assets": "_assets",
                    "receiver": "_receiver"
                }
            },
            "depositWithSignature": {
                "description": "Deposits a specified amount of assets with a signature and receives shares.",
                "fields": {
                    "assets": "_assets",
                    "receiver": "_receiver",
                    "deadline": "_deadline",
                    "approveMax": "_approveMax",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "lastRewardAmount": {
                "description": "Returns the last reward amount.",
                "fields": {}
            },
            "lastSync": {
                "description": "Returns the last synchronization timestamp.",
                "fields": {}
            },
            "maxDeposit": {
                "description": "Returns the maximum amount that can be deposited for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "maxMint": {
                "description": "Returns the maximum amount of shares that can be minted for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "maxRedeem": {
                "description": "Returns the maximum amount of shares that can be redeemed for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "maxWithdraw": {
                "description": "Returns the maximum amount of assets that can be withdrawn for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "mint": {
                "description": "Mints a specified amount of assets for a given number of shares.",
                "fields": {
                    "shares": "_shares",
                    "receiver": "_receiver"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce value for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "previewDeposit": {
                "description": "Returns the amount of shares received for a given amount of assets.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "previewMint": {
                "description": "Returns the amount of assets received for a given number of shares.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "previewRedeem": {
                "description": "Returns the amount of assets received for a given number of shares.",
                "fields": {
                    "shares": "_shares"
                }
            },
            "previewWithdraw": {
                "description": "Returns the amount of shares received for a given amount of assets.",
                "fields": {
                    "assets": "_assets"
                }
            },
            "pricePerShare": {
                "description": "Returns the current price per share.",
                "fields": {}
            },
            "redeem": {
                "description": "Redeems a specified number of shares for assets.",
                "fields": {
                    "shares": "_shares",
                    "receiver": "_receiver",
                    "owner": "_owner"
                }
            },
            "rewardsCycleEnd": {
                "description": "Returns the end of the current rewards cycle.",
                "fields": {}
            },
            "rewardsCycleLength": {
                "description": "Returns the length of the rewards cycle.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "syncRewards": {
                "description": "Synchronizes rewards to the current cycle.",
                "fields": {}
            },
            "totalAssets": {
                "description": "Returns the total assets held by the contract.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of shares.",
                "fields": {}
            },
            "withdraw": {
                "description": "Withdraws a specified amount of assets and receives shares.",
                "fields": {
                    "assets": "_assets",
                    "receiver": "_receiver",
                    "owner": "_owner"
                }
            }
        }
    },
    "0x96F6eF951840721AdBF46Ac996b59E0235CB985C": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "_admin": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon address changes.",
                "fields": {
                    "beacon": "_beacon"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            }
        }
    },
    "0xD533a949740bb3306d119CC777fa900bA034cd52": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `_value` amount of tokens to address `_to`.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `_value` amount of tokens from address `_from` to address `_to`.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Approves `_spender` to spend `_value` amount of tokens on behalf of the caller.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            }
        },
        "other_functions": {
            "update_mining_parameters": {
                "description": "Updates mining parameters.",
                "fields": {}
            },
            "start_epoch_time_write": {
                "description": "Returns the start epoch time.",
                "fields": {}
            },
            "future_epoch_time_write": {
                "description": "Returns the future epoch time.",
                "fields": {}
            },
            "available_supply": {
                "description": "Returns the available supply of tokens.",
                "fields": {}
            },
            "mintable_in_timeframe": {
                "description": "Returns the mintable amount of tokens in a given timeframe.",
                "fields": {
                    "start": "_start",
                    "end": "_end"
                }
            },
            "set_minter": {
                "description": "Sets the minter address.",
                "fields": {
                    "_minter": "_minter"
                }
            },
            "set_admin": {
                "description": "Sets the admin address.",
                "fields": {
                    "_admin": "_admin"
                }
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that `_spender` is allowed to spend on behalf of `_owner`.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "mint": {
                "description": "Mints `_value` amount of tokens to address `_to`.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "burn": {
                "description": "Burns `_value` amount of tokens from the caller's balance.",
                "fields": {
                    "_value": "_value"
                }
            },
            "set_name": {
                "description": "Sets the name and symbol of the token.",
                "fields": {
                    "_name": "_name",
                    "_symbol": "_symbol"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of tokens for address `arg0`.",
                "fields": {
                    "arg0": "_arg0"
                }
            },
            "minter": {
                "description": "Returns the address of the current minter.",
                "fields": {}
            },
            "admin": {
                "description": "Returns the address of the current admin.",
                "fields": {}
            },
            "mining_epoch": {
                "description": "Returns the current mining epoch.",
                "fields": {}
            },
            "start_epoch_time": {
                "description": "Returns the start epoch time.",
                "fields": {}
            },
            "rate": {
                "description": "Returns the current rate.",
                "fields": {}
            }
        }
    },
    "0x5aFE3855358E112B5647B952709E6165e1c1eEEe": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens from the caller to another address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given owner's address.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "approve": {
                "description": "Approves the spender to spend a specified amount of tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of tokens held by the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places the token uses.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to a spender by the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the address of the contract's owner.",
                "fields": {}
            },
            "paused": {
                "description": "Returns whether the contract is currently paused.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "rescueToken": {
                "description": "Rescues tokens from the contract and sends them to a specified beneficiary.",
                "fields": {
                    "token": "_token",
                    "beneficiary": "_beneficiary"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens in circulation.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "unpause": {
                "description": "Unpauses the contract.",
                "fields": {}
            }
        }
    },
    "0xf951E335afb289353dc249e82926178EaC7DEd78": {
        "transfer_functions": {
            "upgradeTo": {
                "description": "Upgrades the contract to a new implementation.",
                "fields": {
                    "newImplementation": "_newImplementation"
                }
            },
            "upgradeToAndCall": {
                "description": "Upgrades the contract to a new implementation and executes a function call.",
                "fields": {
                    "newImplementation": "_newImplementation",
                    "data": "_data"
                }
            },
            "changeAdmin": {
                "description": "Changes the admin of the contract.",
                "fields": {
                    "newAdmin": "_newAdmin"
                }
            }
        },
        "other_functions": {
            "implementation": {
                "description": "Returns the current implementation address.",
                "fields": {}
            },
            "admin": {
                "description": "Returns the current admin address.",
                "fields": {}
            },
            "constructor": {
                "description": "Initializes the contract with the given implementation address.",
                "fields": {
                    "_logic": "_logic",
                    "admin_": "_admin",
                    "_data": "_data"
                }
            },
            "fallback": {
                "description": "Fallback function to receive Ether.",
                "fields": {}
            }
        },
        "events": {
            "AdminChanged": {
                "description": "Emitted when the admin address changes.",
                "fields": {
                    "previousAdmin": "_previousAdmin",
                    "newAdmin": "_newAdmin"
                }
            },
            "Upgraded": {
                "description": "Emitted when the contract is upgraded to a new implementation.",
                "fields": {
                    "implementation": "_implementation"
                }
            },
            "BeaconUpgraded": {
                "description": "Emitted when the beacon is upgraded.",
                "fields": {
                    "beacon": "_beacon"
                }
            }
        }
    },
    "0x5283D291DBCF85356A21bA090E6db59121208b44": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to use.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to use.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract.",
                "fields": {}
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in EIP-712 signatures.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals the token uses.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "getVotes": {
                "description": "Returns the number of votes held by a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegates": {
                "description": "Returns the address of the delegatee for a specified account.",
                "fields": {
                    "account": "_account"
                }
            },
            "delegate": {
                "description": "Delegates voting power to a specified address.",
                "fields": {
                    "delegatee": "_delegatee"
                }
            },
            "delegateBySig": {
                "description": "Delegates voting power to a specified address via signature.",
                "fields": {
                    "delegatee": "_delegatee",
                    "nonce": "_nonce",
                    "expiry": "_expiry",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "getPastVotes": {
                "description": "Returns the number of votes held by a specified address at a past block.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "getPastTotalSupply": {
                "description": "Returns the total supply of tokens at a past block.",
                "fields": {
                    "blockNumber": "_blockNumber"
                }
            },
            "checkpoints": {
                "description": "Returns the checkpoint data for a specified account at a given position.",
                "fields": {
                    "account": "_account",
                    "pos": "_pos"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for a specified account.",
                "fields": {
                    "account": "_account"
                }
            },
            "lockups": {
                "description": "Returns the lockup addresses.",
                "fields": {}
            },
            "addLockups": {
                "description": "Adds lockup addresses.",
                "fields": {
                    "_lockups": "_lockups"
                }
            },
            "permit": {
                "description": "Allows a spender to use tokens on behalf of the owner via signature.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the nonce for a specified address.",
                "fields": {
                    "owner": "_owner"
                }
            }
        }
    },
    "0x0C356B7fD36a5357E5A017EF11887ba100C9AB76": {
        "transfer_functions": {
            "approve": {
                "description": "Sets the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "transfer": {
                "description": "Transfers tokens from the caller's account to the recipient.",
                "fields": {
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers tokens from one account to another, using the allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given parameters.",
                "fields": {
                    "_name": "_name",
                    "_symbol": "_symbol",
                    "_tokenDecimals": "_tokenDecimals",
                    "_cosmosDenom": "_cosmosDenom"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role.",
                "fields": {}
            },
            "MINTER_ROLE": {
                "description": "Returns the minter role.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the balance of the specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a given account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "cosmosDenom": {
                "description": "Returns the Cosmos denomination of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "getRoleAdmin": {
                "description": "Returns the admin role that controls the specified role.",
                "fields": {
                    "role": "_role"
                }
            },
            "grantRole": {
                "description": "Grants a role to a specified account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that an owner allows a spender to use.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "mint": {
                "description": "Mints a specified amount of tokens to a given account.",
                "fields": {
                    "user": "_user",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "renounceRole": {
                "description": "Renounces a role held by the caller.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from a specified account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "setDenom": {
                "description": "Sets the Cosmos denomination of the token.",
                "fields": {
                    "denom": "_denom"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            }
        }
    },
    "0x111111111117dC0aa78b770fA6A738034120C302": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another, using the allowance set by the owner.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Allows a spender to withdraw from the owner's account multiple times, up to the specified amount.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the amount of tokens that a spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the amount of tokens that a spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given owner address.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "DOMAIN_SEPARATOR": {
                "description": "Returns the domain separator used in the EIP-712 encoding for permits.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the amount of tokens that a spender is allowed to withdraw from the owner's account.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a given address's account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used for the token.",
                "fields": {}
            },
            "mint": {
                "description": "Mints a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for a given address, used for permit signatures.",
                "fields": {
                    "owner": "_owner"
                }
            },
            "owner": {
                "description": "Returns the address of the current owner.",
                "fields": {}
            },
            "permit": {
                "description": "Allows a spender to withdraw tokens from an owner's account using a permit instead of a transaction.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value",
                    "deadline": "_deadline",
                    "v": "_v",
                    "r": "_r",
                    "s": "_s"
                }
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract, leaving it without an owner.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens in circulation.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            }
        },
        "events": {
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership is transferred.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Transfer": {
                "description": "Emitted when a transfer of tokens occurs.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0xb23d80f5FefcDDaa212212F028021B41DEd428CF": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers a specified amount of tokens to a given address.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers a specified amount of tokens from one address to another.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves a spender to withdraw a specified amount of tokens from the owner's account.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of a spender by a specified amount.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with given parameters.",
                "fields": {
                    "allowlistFrom": "_allowlistFrom",
                    "allowlistTo": "_allowlistTo",
                    "unlockTimestamp": "_unlockTimestamp"
                }
            },
            "DEFAULT_ADMIN_ROLE": {
                "description": "Returns the default admin role.",
                "fields": {}
            },
            "INVOKE_ECHELON_CONFIGURATION_ROLE": {
                "description": "Returns the role for invoking echelon configuration.",
                "fields": {}
            },
            "NAME": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "SYMBOL": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "SUPPLY": {
                "description": "Returns the total supply of the token.",
                "fields": {}
            },
            "UNLOCK_ROLE": {
                "description": "Returns the unlock role.",
                "fields": {}
            },
            "unlocked": {
                "description": "Checks if the contract is unlocked.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the balance of a specified address.",
                "fields": {
                    "account": "_account"
                }
            },
            "allowance": {
                "description": "Returns the remaining amount of tokens that a spender is allowed to withdraw from an owner's account.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "burn": {
                "description": "Burns a specified amount of tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns a specified amount of tokens from a specified account.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places for the token.",
                "fields": {}
            },
            "executeUnlock": {
                "description": "Executes the unlock process.",
                "fields": {}
            },
            "getRoleAdmin": {
                "description": "Returns the admin role for a given role.",
                "fields": {
                    "role": "_role"
                }
            },
            "grantRole": {
                "description": "Grants a role to a specified account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "hasRole": {
                "description": "Checks if an account has a specific role.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "revokeRole": {
                "description": "Revokes a role from a specified account.",
                "fields": {
                    "role": "_role",
                    "account": "_account"
                }
            },
            "isAllowlistFrom": {
                "description": "Checks if an address is on the allowlist from.",
                "fields": {
                    "address": "_address"
                }
            },
            "isAllowlistTo": {
                "description": "Checks if an address is on the allowlist to.",
                "fields": {
                    "address": "_address"
                }
            },
            "name": {
                "description": "Returns the name of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the contract.",
                "fields": {}
            },
            "toggleAllowlistFrom": {
                "description": "Toggles the status of an address on the allowlist from.",
                "fields": {
                    "allowlistAddresses": "_allowlistAddresses",
                    "toggle": "_toggle"
                }
            },
            "toggleAllowlistTo": {
                "description": "Toggles the status of an address on the allowlist to.",
                "fields": {
                    "allowlistAddresses": "_allowlistAddresses",
                    "toggle": "_toggle"
                }
            },
            "echelonGateways": {
                "description": "Returns the echelon gateway information for a given address.",
                "fields": {
                    "address": "_address"
                }
            },
            "invokeEchelon": {
                "description": "Invokes an echelon process with specified parameters.",
                "fields": {
                    "handlerAddress": "_handlerAddress",
                    "id": "_id",
                    "primeValue": "_primeValue",
                    "data": "_data"
                }
            },
            "addEchelonHandlerContract": {
                "description": "Adds a new echelon handler contract.",
                "fields": {
                    "contractAddress": "_contractAddress",
                    "ethDestinationAddress": "_ethDestinationAddress",
                    "primeDestinationAddress": "_primeDestinationAddress"
                }
            },
            "supportsInterface": {
                "description": "Checks if the contract supports a specific interface.",
                "fields": {
                    "interfaceId": "_interfaceId"
                }
            }
        }
    },
    "0x6fB3e0A217407EFFf7Ca062D46c26E5d60a14d69": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `_value` amount of tokens to address `_to`.",
                "fields": {
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "transferFrom": {
                "description": "Transfers `_value` amount of tokens from address `_from` to address `_to`.",
                "fields": {
                    "_from": "_from",
                    "_to": "_to",
                    "_value": "_value"
                }
            },
            "approve": {
                "description": "Allows `_spender` to withdraw `_value` amount of tokens from the caller's account.",
                "fields": {
                    "_spender": "_spender",
                    "_value": "_value"
                }
            },
            "increaseApproval": {
                "description": "Increases the allowance of `_spender` by `_addedValue` tokens.",
                "fields": {
                    "_spender": "_spender",
                    "_addedValue": "_addedValue"
                }
            },
            "decreaseApproval": {
                "description": "Decreases the allowance of `_spender` by `_subtractedValue` tokens.",
                "fields": {
                    "_spender": "_spender",
                    "_subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "decimals": {
                "description": "Returns the number of decimals used by the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "balanceOf": {
                "description": "Returns the token balance of address `_owner`.",
                "fields": {
                    "_owner": "_owner"
                }
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `_spender` is allowed to spend from `_owner`.",
                "fields": {
                    "_owner": "_owner",
                    "_spender": "_spender"
                }
            },
            "paused": {
                "description": "Returns whether the contract is paused.",
                "fields": {}
            },
            "pause": {
                "description": "Pauses the contract.",
                "fields": {}
            },
            "unpause": {
                "description": "Unpauses the contract.",
                "fields": {}
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to a new address.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "constructor": {
                "description": "Initializes the contract with the given total token amount.",
                "fields": {
                    "tokenTotalAmount": "_tokenTotalAmount"
                }
            },
            "Pause": {
                "description": "Emitted when the contract is paused.",
                "fields": {}
            },
            "Unpause": {
                "description": "Emitted when the contract is unpaused.",
                "fields": {}
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership is transferred.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Approval": {
                "description": "Emitted when an approval is made.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "Transfer": {
                "description": "Emitted when a transfer occurs.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    },
    "0xe53EC727dbDEB9E2d5456c3be40cFF031AB40A55": {
        "transfer_functions": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to the `recipient` address.",
                "fields": {
                    "recipient": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `sender` to `recipient` using the allowance mechanism.",
                "fields": {
                    "sender": "_sender",
                    "recipient": "_recipient",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Approves `spender` to spend `amount` tokens on behalf of the caller.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance of `spender` by `subtractedValue`.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance of `spender` by `addedValue`.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "mint": {
                "description": "Mints `amount` new tokens to the `recipient` address.",
                "fields": {
                    "recipient": "_to",
                    "amount": "_amount"
                }
            },
            "burn": {
                "description": "Burns `amount` tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns `amount` tokens from `account`.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract with the given name, ticker, and cap.",
                "fields": {
                    "_name": "_name",
                    "_ticker": "_ticker",
                    "_cap": "_cap"
                }
            },
            "DELEGATION_TYPEHASH": {
                "description": "Returns the typehash for the delegation.",
                "fields": {}
            },
            "DOMAIN_TYPEHASH": {
                "description": "Returns the typehash for the domain.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the number of tokens held by `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "cap": {
                "description": "Returns the maximum number of tokens that can be minted.",
                "fields": {}
            },
            "checkpoints": {
                "description": "Returns the number of votes at a specific block for an address.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used for token amounts.",
                "fields": {}
            },
            "delegates": {
                "description": "Returns the delegate address for `delegator`.",
                "fields": {
                    "delegator": "_delegator"
                }
            },
            "getCurrentVotes": {
                "description": "Returns the current number of votes for `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "getPriorVotes": {
                "description": "Returns the number of votes for `account` at a specific block.",
                "fields": {
                    "account": "_account",
                    "blockNumber": "_blockNumber"
                }
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "nonces": {
                "description": "Returns the current nonce for `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "numCheckpoints": {
                "description": "Returns the number of checkpoints for an address.",
                "fields": {
                    "account": "_account"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `newOwner`.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "version": {
                "description": "Returns the version of the contract.",
                "fields": {}
            }
        }
    },
    "0xe3c408BD53c31C085a1746AF401A4042954ff740": {
        "transfer": {
            "transfer": {
                "description": "Transfers `amount` tokens from the caller's account to the `to` account.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "transferFrom": {
                "description": "Transfers `amount` tokens from `from` to `to` using the allowance mechanism.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "approve": {
                "description": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
                "fields": {
                    "spender": "_spender",
                    "amount": "_amount"
                }
            },
            "increaseAllowance": {
                "description": "Increases the allowance granted to `spender` by the caller.",
                "fields": {
                    "spender": "_spender",
                    "addedValue": "_addedValue"
                }
            },
            "decreaseAllowance": {
                "description": "Decreases the allowance granted to `spender` by the caller.",
                "fields": {
                    "spender": "_spender",
                    "subtractedValue": "_subtractedValue"
                }
            }
        },
        "other_functions": {
            "constructor": {
                "description": "Initializes the contract.",
                "fields": {}
            },
            "allowance": {
                "description": "Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender"
                }
            },
            "balanceOf": {
                "description": "Returns the token balance of `account`.",
                "fields": {
                    "account": "_account"
                }
            },
            "burn": {
                "description": "Burns `amount` tokens from the caller's account.",
                "fields": {
                    "amount": "_amount"
                }
            },
            "burnFrom": {
                "description": "Burns `amount` tokens from `account` using the allowance mechanism.",
                "fields": {
                    "account": "_account",
                    "amount": "_amount"
                }
            },
            "decimals": {
                "description": "Returns the number of decimal places used by the token.",
                "fields": {}
            },
            "name": {
                "description": "Returns the name of the token.",
                "fields": {}
            },
            "symbol": {
                "description": "Returns the symbol of the token.",
                "fields": {}
            },
            "totalSupply": {
                "description": "Returns the total supply of tokens.",
                "fields": {}
            },
            "mint": {
                "description": "Mints `amount` new tokens and sends them to `to`.",
                "fields": {
                    "to": "_to",
                    "amount": "_amount"
                }
            },
            "owner": {
                "description": "Returns the current owner of the contract.",
                "fields": {}
            },
            "renounceOwnership": {
                "description": "Renounces ownership of the contract.",
                "fields": {}
            },
            "transferOwnership": {
                "description": "Transfers ownership of the contract to `newOwner`.",
                "fields": {
                    "newOwner": "_newOwner"
                }
            },
            "Approval": {
                "description": "Emitted when `spender` is approved to spend `value` tokens on behalf of `owner`.",
                "fields": {
                    "owner": "_owner",
                    "spender": "_spender",
                    "value": "_value"
                }
            },
            "OwnershipTransferred": {
                "description": "Emitted when ownership of the contract is transferred from `previousOwner` to `newOwner`.",
                "fields": {
                    "previousOwner": "_previousOwner",
                    "newOwner": "_newOwner"
                }
            },
            "Transfer": {
                "description": "Emitted when `value` tokens are transferred from `from` to `to`.",
                "fields": {
                    "from": "_from",
                    "to": "_to",
                    "value": "_value"
                }
            }
        }
    }
}