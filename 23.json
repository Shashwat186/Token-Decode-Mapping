{
  "transfer_functions": {
    "transfer": {
      "description": "Transfers a certain amount of tokens from the caller's address to a specified address.",
      "fields": {
        "to": "Recipient address",
        "amount": "Amount of tokens to transfer"
      }
    },
    "transferFrom": {
      "description": "Transfers a certain amount of tokens from a specified address to another address on behalf of the token holder.",
      "fields": {
        "from": "Source address",
        "to": "Destination address",
        "amount": "Amount of tokens to transfer"
      }
    },
    "approve": {
      "description": "Approves the specified spender to spend a certain amount of tokens on behalf of the caller.",
      "fields": {
        "spender": "Address authorized to spend",
        "amount": "Amount of tokens to approve"
      }
    },
    "allowance": {
      "description": "Returns the remaining number of tokens that the spender is allowed to spend on behalf of the owner.",
      "fields": {
        "owner": "Owner of tokens",
        "spender": "Spender allowed to use the tokens"
      }
    },
    "increaseAllowance": {
      "description": "Increases the allowance granted to a spender by the caller.",
      "fields": {
        "spender": "Address to which the allowance is being increased",
        "addedValue": "Amount to increase the allowance by"
      }
    },
    "decreaseAllowance": {
      "description": "Decreases the allowance granted to a spender by the caller.",
      "fields": {
        "spender": "Address for which the allowance is being decreased",
        "subtractedValue": "Amount to decrease the allowance by"
      }
    },
    "Approval": {
      "description": "Emitted when an approval is granted to a spender.",
      "fields": {
        "owner": "Address of the token owner",
        "spender": "Address authorized to spend",
        "value": "Amount of tokens approved"
      }
    },
    "Transfer": {
      "description": "Emitted when tokens are transferred from one account to another.",
      "fields": {
        "from": "Address from which the tokens are transferred",
        "to": "Address to which the tokens are transferred",
        "value": "Amount of tokens transferred"
      }
    }
  },
  "other_functions": {
    "constructor": {
      "description": "Initializes the contract with multiple roles and manager addresses.",
      "fields": {
        "migration": "Migration contract address",
        "emissionManager": "Emission manager address",
        "protocolCouncil": "Protocol council address",
        "emergencyCouncil": "Emergency council address"
      }
    },
    "CAP_MANAGER_ROLE": {
      "description": "Returns the bytes32 hash of the Cap Manager role.",
      "fields": {}
    },
    "DEFAULT_ADMIN_ROLE": {
      "description": "Returns the bytes32 hash of the Default Admin role.",
      "fields": {}
    },
    "DOMAIN_SEPARATOR": {
      "description": "Returns the EIP-712 domain separator for the contract.",
      "fields": {}
    },
    "EMISSION_ROLE": {
      "description": "Returns the bytes32 hash of the Emission Role.",
      "fields": {}
    },
    "PERMIT2": {
      "description": "Returns the address of the Permit2 contract.",
      "fields": {}
    },
    "PERMIT2_REVOKER_ROLE": {
      "description": "Returns the bytes32 hash of the Permit2 Revoker Role.",
      "fields": {}
    },
    "decimals": {
      "description": "Returns the number of decimals used to get the user representation of the token.",
      "fields": {}
    },
    "eip712Domain": {
      "description": "Returns details about the EIP-712 domain used by the contract.",
      "fields": {
        "fields": "Domain fields",
        "name": "Domain name",
        "version": "Domain version",
        "chainId": "Blockchain chain ID",
        "verifyingContract": "Address of the contract verifying the domain",
        "salt": "Salt used in the domain",
        "extensions": "Extensions of the domain"
      }
    },
    "getRoleAdmin": {
      "description": "Returns the admin role that controls a specific role.",
      "fields": {
        "role": "Bytes32 hash of the role"
      }
    },
    "getRoleMember": {
      "description": "Returns the address of the member that holds a specific role.",
      "fields": {
        "role": "Bytes32 hash of the role",
        "index": "Index of the member"
      }
    },
    "getRoleMemberCount": {
      "description": "Returns the number of members that hold a specific role.",
      "fields": {
        "role": "Bytes32 hash of the role"
      }
    },
    "grantRole": {
      "description": "Grants a specific role to an account.",
      "fields": {
        "role": "Bytes32 hash of the role",
        "account": "Address of the account to be granted the role"
      }
    },
    "hasRole": {
      "description": "Checks if an account has a specific role.",
      "fields": {
        "role": "Bytes32 hash of the role",
        "account": "Address of the account"
      }
    },
    "lastMint": {
      "description": "Returns the timestamp of the last mint operation.",
      "fields": {}
    },
    "mint": {
      "description": "Mints new tokens to a specified address.",
      "fields": {
        "to": "Address receiving the newly minted tokens",
        "amount": "Amount of tokens to mint"
      }
    },
    "mintPerSecondCap": {
      "description": "Returns the maximum mint cap per second.",
      "fields": {}
    },
    "name": {
      "description": "Returns the name of the token.",
      "fields": {}
    },
    "nonces": {
      "description": "Returns the nonce associated with a token owner.",
      "fields": {
        "owner": "Address of the token owner"
      }
    },
    "permit": {
      "description": "Allows a token owner to approve a spender via a signed message.",
      "fields": {
        "owner": "Owner of the tokens",
        "spender": "Spender being approved",
        "value": "Amount of tokens to approve",
        "deadline": "Expiration timestamp",
        "v": "V value of the signature",
        "r": "R value of the signature",
        "s": "S value of the signature"
      }
    },
    "permit2Enabled": {
      "description": "Checks if Permit2 is enabled.",
      "fields": {}
    },
    "renounceRole": {
      "description": "Allows an account to renounce its role.",
      "fields": {
        "role": "Bytes32 hash of the role",
        "account": "Address of the account"
      }
    },
    "revokeRole": {
      "description": "Revokes a role from an account.",
      "fields": {
        "role": "Bytes32 hash of the role",
        "account": "Address of the account"
      }
    },
    "supportsInterface": {
      "description": "Checks if a certain interface is supported by the contract.",
      "fields": {
        "interfaceId": "Bytes4 identifier of the interface"
      }
    },
    "totalSupply": {
      "description": "Returns the total supply of tokens.",
      "fields": {}
    },
    "updateMintCap": {
      "description": "Updates the mint cap.",
      "fields": {
        "newCap": "New mint cap"
      }
    },
    "updatePermit2Allowance": {
      "description": "Updates the Permit2 allowance state.",
      "fields": {
        "enabled": "True if Permit2 allowance is enabled"
      }
    },
    "version": {
      "description": "Returns the version of the token contract.",
      "fields": {}
    }
  }
}
